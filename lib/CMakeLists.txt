
#FILE(GLOB COMMON_SRCS "*.cc" )

#
# The Policy will throw error about TARGET_SOURCES makes the
# relative paths as absolute
#
IF(POLICY CMP0076)
    CMAKE_POLICY(SET CMP0076 NEW)
ENDIF()

IF(POLICY CMP0079)
    CMAKE_POLICY(SET CMP0079 NEW)
ENDIF()

if(NOT AOCL_RELEASE_VERSION)
	SET(AOCL_RELEASE_VERSION "3.2.1")
ENDIF()

string(TIMESTAMP ALC_BUILD_VERSION "AOCL-Crypto ${AOCL_RELEASE_VERSION} Build %Y%m%d")
ADD_COMPILE_OPTIONS("-DVERSION_STRING=\"${ALC_BUILD_VERSION}\"")

SET(ALCP_VRS_SRC
	version.cc)

SET(ALCP_COMMON_SRCS
	algorithm.cc
	dynlib.cc
	error.cc
	exception.cc
	module.cc
	modulemanager.cc
	)

#[==[
# add_compile_options_config(<CONFIG> <option> ...)
#FUNCTION(ADD_COMPILE_OPTIONS_CONFIG CONFIG)
#    FOREACH(opt ${ARGN})
#        ADD_COMPILE_OPTIONS("$<$<CONFIG:${CONFIG}>:${opt}>")
#    ENDFOREACH()
#ENDFUNCTION()
#]==]

include(utils)

# update all cflags, warnings, here
SET(ALCP_WARNINGS
    -Wall
	CACHE INTERNAL ""
)
SET(ALCP_CFLAGS
    -O2
	-pedantic
	-Werror
	CACHE INTERNAL ""
)
SET (ALCP_CFLAGS_DEBUG
    "-ggdb"
	CACHE INTERNAL ""
)

IF (MSVC)
	ADD_COMPILE_OPTIONS(/W3 /WX)
ELSEIF (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	ADD_COMPILE_OPTIONS_CONFIG(RELEASE ${ALCP_CFLAGS} ${ALCP_WARNINGS})
	ADD_COMPILE_OPTIONS_CONFIG(DEBUG ${ALCP_CFLAGS_DEBUG} ${ALCP_WARNINGS})
ELSE ()
	ADD_COMPILE_OPTIONS_CONFIG(RELEASE ${ALCP_CFLAGS} ${ALCP_WARNINGS})
	ADD_COMPILE_OPTIONS_CONFIG(DEBUG ${ALCP_CFLAGS_DEBUG} ${ALCP_WARNINGS})
ENDIF()

# Set compile option needed to use CPUID
IF(ENABLE_AOCL_CPUID)
	ADD_COMPILE_OPTIONS("-DUSE_AOCL_CPUID")
ENDIF(ENABLE_AOCL_CPUID)

# Set compile option needed to enable AOCL-RNG support
IF(AOCL_INSTALL_DIR)
	ADD_COMPILE_OPTIONS("-DUSE_AOCL_SRNG")
ENDIF(AOCL_INSTALL_DIR)

INCLUDE_DIRECTORIES(
	${CMAKE_SOURCE_DIR}/include
	)

SET(ALCP_LIB_SOURCES
	${ALCP_VRS_SRC}
	${ALCP_COMMON_SRCS}
	)

ADD_LIBRARY(alcp SHARED
	${ALCP_LIB_SOURCES}
	)

ADD_LIBRARY(alcp_static STATIC
	${ALCP_VRS_SRC}
	)

SET_TARGET_PROPERTIES(alcp_static PROPERTIES OUTPUT_NAME alcp)

# Enable CPUID if enabled and available
IF(ENABLE_AOCL_CPUID)
	MESSAGE(STATUS "Enabling AOCL CPUID Support")
	IF(AOCL_CPUID_INSTALL_DIR)
		MESSAGE(STATUS "AOCL_CPUID_INSTALL_DIR set, overriding fetch path")
	ELSE(AOCL_CPUID_INSTALL_DIR)
		SET(AOCL_CPUID_INSTALL_DIR "${CMAKE_SOURCE_DIR}/external")
		MESSAGE(STATUS "AOCL_CPUID_INSTALL_DIR not set, defaulting to external")
	ENDIF(AOCL_CPUID_INSTALL_DIR)
	IF(EXISTS ${AOCL_CPUID_INSTALL_DIR} AND IS_DIRECTORY ${AOCL_CPUID_INSTALL_DIR})
		INCLUDE_DIRECTORIES(${AOCL_CPUID_INSTALL_DIR}/include)
		TARGET_LINK_LIBRARIES(alcp PRIVATE ${AOCL_CPUID_INSTALL_DIR}/lib/libcpu.so)
	ELSE(EXISTS ${AOCL_CPUID_INSTALL_DIR} AND IS_DIRECTORY ${AOCL_CPUID_INSTALL_DIR})
		MESSAGE(FATAL_ERROR "AOCL CPUID fallback error, external directory not found!")
	ENDIF(EXISTS ${AOCL_CPUID_INSTALL_DIR} AND IS_DIRECTORY ${AOCL_CPUID_INSTALL_DIR})
ENDIF(ENABLE_AOCL_CPUID)

TARGET_SOURCES(alcp
	PRIVATE
	${ALCP_LIB_SOURCES}
	)

TARGET_SOURCES(alcp_static
	PRIVATE
	${ALCP_LIB_SOURCES}
	)

ADD_SUBDIRECTORY(arch)
ADD_SUBDIRECTORY(capi)
ADD_SUBDIRECTORY(compat)
ADD_SUBDIRECTORY(cipher)
ADD_SUBDIRECTORY(digest)
ADD_SUBDIRECTORY(ref)
ADD_SUBDIRECTORY(utils)
ADD_SUBDIRECTORY(rng)


TARGET_INCLUDE_DIRECTORIES(alcp PRIVATE
	${CMAKE_CURRENT_SOURCE_DIR}/include)

TARGET_INCLUDE_DIRECTORIES(alcp_static PRIVATE
	${CMAKE_CURRENT_SOURCE_DIR}/include)

TARGET_LINK_LIBRARIES(alcp PUBLIC dl)
TARGET_LINK_LIBRARIES(alcp_static PUBLIC dl)

# Need to build comapt libs after building the libalcp.so
#${COMPAT_SRCS}
