/*
 * Copyright (C) 2023-2024, Advanced Micro Devices. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <algorithm>
#include <memory>
#include <random>

#include <gtest/gtest.h>

#include "alcp/cipher/cipher_wrapper.hh"
#include "alcp/utils/cpuid.hh"
#include "debug_defs.hh"
#include "dispatcher.hh"
#include "randomize.hh"

#undef DEBUG

using alcp::cipher::CipherFactory;
using alcp::cipher::iCipher;
namespace alcp::cipher::unittest::ctr {
std::vector<Uint8> key = { 0x78, 0xfd, 0x59, 0x2e, 0x80, 0x4d, 0x37, 0x66,
                           0x60, 0x8c, 0x99, 0x4d, 0xe7, 0x5c, 0x06, 0xb5 };
const string cCipher   = "aes-ctr-128"; // Needs to be modified base on the key
std::vector<Uint8> iv  = { 0xde, 0x6b, 0x64, 0x30, 0x9d, 0x76, 0xa8, 0x43,
                          0x79, 0x28, 0x19, 0xc2, 0x56, 0x40, 0xc9, 0x3b };
std::vector<Uint8> plainText = {
    0x2d, 0xdd, 0xc7, 0x13, 0xfd, 0x52, 0x75, 0xbc, 0x83, 0x76, 0x81, 0x24,
    0xee, 0x38, 0x10, 0x6f, 0x2a, 0x97, 0x62, 0xb9, 0xc1, 0x69, 0x5a, 0x5d,
    0x7c, 0xad, 0x3b, 0xbb, 0x1f, 0x5d, 0x96, 0xfa, 0xbc, 0x2b, 0x5c, 0x4e,
    0x5f, 0x46, 0x8d, 0xbf, 0x6e, 0x38, 0x14, 0xa6, 0xa4, 0xd8, 0x47, 0x0f,
    0xc1, 0xc5, 0x09, 0x29, 0xd7, 0x92, 0xaf, 0x55, 0x6e, 0x6d, 0xbd, 0xb0,
    0x18, 0xdd, 0xd9, 0x7a, 0x7e, 0x69, 0xf6, 0x9c, 0xa6, 0xf3, 0x3a, 0xf0,
    0xfc, 0x2d, 0xb0, 0xc2, 0x64, 0xf1, 0xd6, 0x19, 0x29, 0x0f, 0xfb, 0x23,
    0x6a, 0xab, 0xc6, 0xeb, 0x96, 0xda, 0x4c, 0x49, 0x64, 0x2d, 0x57, 0x36,
    0x09, 0x2f, 0x08, 0x72, 0xf7, 0x5e, 0x4e, 0xf4, 0xcc, 0x98, 0x61, 0x3d,
    0x17, 0x64, 0xcb, 0xbe, 0x63, 0xca, 0x13, 0xb4, 0x9f, 0x33, 0x01, 0x48,
    0x4c, 0xff, 0x36, 0x0f, 0x61, 0x12, 0x6f, 0xe2, 0x99, 0xd3, 0xac, 0x1c,
    0x1a, 0x30, 0x9d, 0x9e, 0x10, 0xc0, 0x1c, 0x4a, 0x51, 0xb3, 0x5d, 0x0e,
    0x3e, 0x60, 0xc5, 0xa4, 0xaf, 0xe9, 0x46, 0x32, 0xe1, 0x19, 0x3d, 0x6a,
    0x6b, 0xb5, 0x93, 0x01, 0xc6, 0x98, 0x7f, 0x3a, 0x00, 0x10, 0x2e, 0x24,
    0xd4, 0xe5, 0x02, 0x98, 0x0e, 0xe5, 0x8b, 0xf6, 0xca, 0xb7, 0x17, 0xdb,
    0x38, 0x41, 0x6c, 0xb6, 0x28, 0x56, 0xbf, 0xb5, 0x59, 0x63, 0xfd, 0x75,
    0xcc, 0x1c, 0xbe, 0x3a, 0xe5, 0xd8, 0x81, 0x54, 0x9c, 0x1e, 0x07, 0x8a,
    0x79, 0x8f, 0xef, 0x07, 0xe8, 0xc7, 0xd7, 0xa3, 0x3f, 0x92, 0xad, 0xdf,
    0x50, 0xec, 0x5c, 0x25, 0xa2, 0x7b, 0x73, 0xa4, 0xea, 0xb2, 0x0c, 0x95,
    0x85, 0xfe, 0xf0, 0xb6, 0xff, 0x72, 0xf6, 0xd6, 0xcc, 0x8c, 0x5e, 0x01,
    0xae, 0x80, 0x6b, 0x0d, 0xca, 0xd4, 0x4a, 0xdc, 0xc1, 0xf0, 0x69, 0xd3,
    0x11, 0x8d, 0xe9, 0xa4, 0x3e, 0xd3, 0x5c, 0xf9, 0xf7, 0x70, 0xaf, 0x06,
    0x14, 0x24, 0x07, 0x20, 0x13, 0xd0, 0x6a, 0xe5, 0xec, 0x81, 0xa6, 0x59,
    0xfa, 0x48, 0xa1, 0x9b, 0x10, 0xf5, 0x4e, 0xc9, 0x82, 0xf5, 0x64, 0x81,
    0x81, 0x44, 0x17, 0x73, 0x73, 0xee, 0xe6, 0xdb, 0x8d, 0xf0, 0xc7, 0xcd,
    0x3a, 0x6b, 0x40, 0x4d, 0x91, 0x72, 0xb4, 0x08, 0xe8, 0xf2, 0xa6, 0xa1,
    0x48, 0xd2, 0x00, 0x60, 0x8d, 0xc5, 0x48, 0x49, 0x92, 0xca, 0xa5, 0xca,
    0x03, 0x5f, 0x95, 0xe4, 0xd5, 0x84, 0x5b, 0x92, 0x46, 0x04, 0x84, 0x68,
    0x1e, 0x5e, 0x9e, 0xdb, 0xe2, 0x52, 0xc9, 0xa7, 0x03, 0xeb, 0xd6, 0x7e,
    0x2d, 0x1f, 0x95, 0x69, 0x8e, 0xa1, 0x55, 0xb1, 0x38, 0x9d, 0xc5, 0xba,
    0x0a, 0x1a, 0x69, 0x42, 0xee, 0x0e, 0xe2, 0x96, 0x8a, 0x4e, 0x59, 0x72,
    0x94, 0x05, 0x58, 0x7b, 0xac, 0xb8, 0xec, 0x7d, 0x25, 0x2e, 0xc5, 0xcd,
    0xd9, 0x23, 0x84, 0xd2, 0x3b, 0xe0, 0x86, 0xda, 0xfe, 0x70, 0x1a, 0x4e,
    0x47, 0x02, 0x63, 0xe3, 0xd1, 0x9a, 0x31, 0x7d, 0xfa, 0x10, 0x6a, 0x65,
    0x6c, 0xb6, 0x3a, 0xda, 0xf6, 0x54, 0xa2, 0xe9, 0xac, 0x7f, 0x6a, 0x30,
    0xf7, 0xae, 0xc0, 0xe7, 0xdd, 0xe5, 0x41, 0xb2, 0x0f, 0x59, 0x51, 0x56,
    0x67, 0xb1, 0xf0, 0xed, 0x4e, 0xf2, 0xce, 0xb9, 0x1e, 0x5f, 0xf5, 0x55,
    0x1c, 0x00, 0x6f, 0x71, 0xbb, 0xcc, 0xa1, 0x6a, 0xf7, 0x1f, 0xed, 0xd6,
    0xa0, 0x23, 0x32, 0x22, 0xb6, 0x07, 0x63, 0x9e, 0x73, 0x36, 0x0b, 0x40,
    0x8f, 0xfc, 0xce, 0x6f, 0x15, 0x7b, 0x81, 0xb8, 0xc8, 0xb4, 0xc2, 0xb4,
    0x58, 0xbc, 0x2b, 0xe9, 0x8a, 0x1f, 0xd3, 0x5c, 0x5a, 0xd7, 0xbd, 0x60,
    0x7d, 0x9f, 0xe3, 0x2f, 0x5f, 0xcf, 0xc6, 0xd2, 0xe7, 0xdb, 0xec, 0x50,
    0x89, 0x72, 0xba, 0x7c, 0xcb, 0xfa, 0x8d, 0xf0, 0x9c, 0x27, 0xfd, 0xe2,
    0xbc, 0xb0, 0x07, 0x9f, 0x1f, 0xa5, 0xa4, 0xd7, 0x85, 0x86, 0x70, 0x3c,
    0x22, 0x26, 0xad, 0x6f, 0xd3, 0x28, 0x5c, 0x8c, 0xeb, 0x87, 0x6d, 0xac,
    0x7a, 0x07, 0xc8, 0x52, 0xfc, 0x30, 0xf8, 0xf1, 0xf3, 0x8e, 0x7e, 0xf2,
    0xb4, 0x61, 0x44, 0xcb, 0xbd, 0xec, 0x1b, 0xef, 0x50, 0x7f, 0x40, 0x04,
    0xe3, 0x48, 0x24, 0x76, 0xef, 0x15, 0x44, 0x3f, 0xb1, 0x34, 0x30, 0x70,
    0x2a, 0x2c, 0x52, 0x49, 0x73, 0x8e, 0x36, 0x66, 0x3d, 0xca, 0x8a, 0x40,
    0x40, 0x36, 0x58, 0x35, 0x4b, 0x28, 0xa5, 0xc7, 0x62, 0x4f, 0xd9, 0x74,
    0xc0, 0xc6, 0xf9, 0x41, 0x85, 0x63, 0x75, 0x3f, 0x1f, 0x5e, 0x1f, 0x59,
    0x33, 0x86, 0x2f, 0x6e, 0xce, 0xae, 0x04, 0xa0, 0x46, 0x7d, 0x00, 0x04,
    0x0a, 0xc7, 0xb6, 0x55, 0xc6, 0xb0, 0x17, 0x7c, 0x0d, 0xc0, 0xce, 0x90,
    0x3e, 0x16, 0x38, 0x17
};
std::vector<Uint8> cipherText = {
    0xe2, 0x86, 0x00, 0xa6, 0x57, 0x4a, 0x3d, 0xdf, 0x6c, 0x7a, 0xcc, 0xcd,
    0x7b, 0xf7, 0xc4, 0xd8, 0xf4, 0x2e, 0xef, 0x83, 0x67, 0x49, 0x1b, 0x34,
    0xd8, 0x54, 0x34, 0x67, 0xdb, 0xbe, 0x8b, 0x5e, 0x5a, 0xe6, 0x88, 0xc3,
    0x9e, 0x9d, 0x98, 0x3e, 0x90, 0x85, 0xd3, 0x8a, 0x84, 0x90, 0x3d, 0x80,
    0x45, 0x7b, 0xb0, 0x5a, 0x51, 0x76, 0xe8, 0x7f, 0x4d, 0x91, 0x8f, 0xe8,
    0x1f, 0xee, 0xc9, 0xe7, 0xb9, 0x1d, 0x95, 0x24, 0x7f, 0x9a, 0x7c, 0x1d,
    0x64, 0x04, 0x02, 0x55, 0xb3, 0xaa, 0x51, 0x43, 0xcf, 0xce, 0x12, 0xa5,
    0x12, 0xd7, 0x75, 0x9d, 0x09, 0xc2, 0x5f, 0x9f, 0xff, 0x97, 0xd1, 0x52,
    0x51, 0xce, 0x05, 0x54, 0x44, 0x51, 0x24, 0xae, 0x2d, 0x89, 0x90, 0xaa,
    0x02, 0x51, 0x60, 0xb2, 0xfc, 0x75, 0x0e, 0xa1, 0x50, 0x60, 0xa9, 0x8b,
    0xa5, 0x6d, 0xe0, 0x3c, 0xa5, 0x6a, 0xb3, 0xe1, 0x1e, 0xa1, 0xbc, 0x6e,
    0x05, 0x6c, 0xb5, 0x82, 0xcc, 0xc6, 0xdb, 0xa2, 0xf7, 0x00, 0xa0, 0xb8,
    0xfa, 0x1f, 0x5d, 0x2c, 0x98, 0x01, 0x4c, 0x05, 0xb7, 0xe3, 0x45, 0x09,
    0x72, 0x99, 0x0a, 0xff, 0x2d, 0xd5, 0x30, 0x10, 0xb4, 0x0f, 0x13, 0x94,
    0x4b, 0xb4, 0x24, 0xa9, 0x3e, 0xad, 0x4f, 0xe1, 0x43, 0x6a, 0xb2, 0x62,
    0x95, 0x1d, 0xec, 0x6e, 0xac, 0x7a, 0xc0, 0xc5, 0xf6, 0xa2, 0xe8, 0x16,
    0xd9, 0x5c, 0x63, 0xb3, 0x5f, 0xa1, 0x27, 0x56, 0x5f, 0x89, 0x97, 0x1e,
    0xea, 0x0c, 0xb7, 0xea, 0xcc, 0xb6, 0x22, 0x74, 0x59, 0xda, 0xab, 0xb7,
    0xed, 0x19, 0x03, 0xf3, 0x2f, 0x9b, 0x85, 0xc6, 0x80, 0x47, 0x2b, 0xab,
    0xd1, 0x00, 0x94, 0xae, 0x31, 0xd4, 0x54, 0x27, 0x4a, 0xb8, 0xc7, 0x16,
    0xf7, 0x31, 0xab, 0x60, 0x11, 0xe9, 0xa7, 0x27, 0x94, 0xf6, 0x47, 0xe8,
    0xbf, 0x5b, 0x7a, 0x1b, 0xf1, 0xe8, 0x51, 0x50, 0xc2, 0xfa, 0x83, 0x2b,
    0xf3, 0xaa, 0x69, 0xe0, 0xcf, 0xf0, 0x44, 0xf4, 0x63, 0x57, 0xc0, 0xd0,
    0x7f, 0x9c, 0x1b, 0xdc, 0x61, 0x8f, 0x3b, 0xff, 0x67, 0xd2, 0x73, 0xc0,
    0x1a, 0x6c, 0xee, 0xde, 0xed, 0xb5, 0x93, 0xf6, 0x02, 0x96, 0x4a, 0x42,
    0x99, 0xa8, 0x25, 0x94, 0x39, 0x9c, 0xbe, 0xa3, 0xe1, 0xb5, 0x78, 0x2b,
    0x14, 0x69, 0xfa, 0x4e, 0x8b, 0x59, 0xf2, 0x14, 0x7b, 0xa3, 0x18, 0xd3,
    0x04, 0x3a, 0x55, 0x5b, 0xf0, 0x4b, 0xb1, 0x27, 0x15, 0xb7, 0x50, 0xad,
    0x55, 0xe3, 0x7a, 0x0a, 0x92, 0xcd, 0x65, 0x7b, 0x18, 0x19, 0x15, 0x29,
    0x10, 0xf5, 0x30, 0x08, 0xa1, 0xfa, 0xb7, 0xd5, 0xe5, 0x30, 0x25, 0xaa,
    0x8f, 0xb2, 0xbf, 0x4d, 0xb8, 0xda, 0x29, 0xfd, 0x63, 0x7f, 0x8c, 0xdf,
    0xcf, 0x42, 0x9a, 0x80, 0xd0, 0x4d, 0x91, 0xc5, 0xf5, 0x82, 0x88, 0xb3,
    0x92, 0xfd, 0xa7, 0x1d, 0xe9, 0x13, 0xe9, 0x53, 0xf4, 0x61, 0xd3, 0xf1,
    0xff, 0xeb, 0xd4, 0xa6, 0x52, 0x91, 0x39, 0xbf, 0x0e, 0x78, 0x8c, 0x8f,
    0x58, 0x6a, 0x8f, 0x1f, 0x90, 0xb3, 0xe2, 0x1a, 0x23, 0x07, 0x63, 0x53,
    0x69, 0xca, 0x82, 0xaa, 0xce, 0x1c, 0xb3, 0x21, 0x19, 0x23, 0xfb, 0xd0,
    0xf6, 0x0b, 0x89, 0x08, 0x55, 0x3b, 0xbf, 0xbc, 0x05, 0xda, 0xe8, 0x1a,
    0x5c, 0x9d, 0xea, 0x5f, 0x3b, 0xd1, 0x4b, 0xf2, 0xde, 0xce, 0x6d, 0x0f,
    0x45, 0x07, 0x2e, 0xcc, 0x1a, 0x17, 0x28, 0xaa, 0xaf, 0x39, 0x03, 0x4a,
    0xf2, 0x0f, 0x3b, 0xae, 0x12, 0x60, 0x42, 0x2e, 0xa6, 0xfd, 0x7d, 0x44,
    0xd6, 0xee, 0x48, 0xf3, 0x91, 0xde, 0x9f, 0xd2, 0x08, 0xea, 0x11, 0x1e,
    0x40, 0x59, 0x31, 0xde, 0x21, 0x51, 0xb8, 0x3e, 0x3a, 0x99, 0x67, 0xbd,
    0xc5, 0xea, 0xbe, 0x7a, 0xfb, 0xa9, 0xc4, 0x64, 0x48, 0x72, 0x8b, 0x6b,
    0x99, 0xd5, 0xbe, 0xf4, 0x72, 0xd5, 0x50, 0xb4, 0xdb, 0xe9, 0xca, 0x66,
    0x6f, 0x40, 0x40, 0x5e, 0x14, 0x20, 0xe5, 0xb3, 0x25, 0x8e, 0x06, 0xe0,
    0x8e, 0x68, 0x4b, 0xf0, 0x3b, 0x03, 0x0b, 0xc7, 0xa9, 0x1b, 0xd3, 0x20,
    0x2f, 0xa7, 0xd7, 0xab, 0xa4, 0x5a, 0x70, 0xb9, 0x9c, 0x94, 0xe6, 0x8a,
    0xd5, 0x03, 0x45, 0x73, 0xb4, 0x32, 0xb9, 0x87, 0xcb, 0x8e, 0x37, 0x89,
    0x15, 0x30, 0xbb, 0x0c, 0xa3, 0x52, 0x18, 0x94, 0x97, 0x8b, 0x7b, 0x6c,
    0x05, 0x63, 0x26, 0xd8, 0xf5, 0xca, 0xab, 0x3f, 0x3f, 0xf3, 0xb6, 0x1d,
    0x4b, 0xea, 0x21, 0x94, 0xfe, 0xfc, 0x6a, 0x94, 0xce, 0x02, 0x82, 0x05,
    0x9a, 0x7f, 0xc9, 0x3b, 0x11, 0x7a, 0xe5, 0x04, 0x14, 0x7a, 0xb9, 0x00,
    0xf3, 0xc4, 0x25, 0x5a, 0x2c, 0x28, 0xe5, 0x53, 0x68, 0x12, 0x59, 0x18,
    0x17, 0xdc, 0x8f, 0x39
};

} // namespace alcp::cipher::unittest::ctr

using namespace alcp::cipher::unittest;
using namespace alcp::cipher::unittest::ctr;
TEST(CTR, creation)
{
    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();
    for (CpuCipherFeatures feature : cpu_features) {
#ifdef DEBUG
        std::cout
            << "Cpu Feature:"
            << static_cast<
                   typename std::underlying_type<CpuCipherFeatures>::type>(
                   feature)
            << std::endl;
#endif
        auto alcpCipher = new CipherFactory<iCipher>;
        auto ctr        = alcpCipher->create("aes-ctr-128", feature);
        if (ctr == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        delete alcpCipher;
    }
}

TEST(CTR, BasicEncryption)
{
    auto alcpCipher = new CipherFactory<iCipher>;
    auto ctr        = alcpCipher->create("aes-ctr-128");

    if (ctr == nullptr) {
        delete alcpCipher;
        FAIL();
    }
    std::vector<Uint8> output(cipherText.size());

    alc_error_t err = ctr->init(&key[0], key.size() * 8, &iv[0], iv.size());

    if (alcp_is_error(err)) {
        std::cout << "Init failed!" << std::endl;
    }

    EXPECT_FALSE(alcp_is_error(err));

    err = ctr->encrypt(&plainText[0], &output[0], plainText.size());

    if (alcp_is_error(err)) {
        std::cout << "Encrypt failed!" << std::endl;
    }

    EXPECT_FALSE(alcp_is_error(err));

    delete alcpCipher;
    EXPECT_EQ(cipherText, output);
}

TEST(CTR, BasicDecryption)
{
    auto alcpCipher = new CipherFactory<iCipher>;
    auto ctr        = alcpCipher->create("aes-ctr-128");

    if (ctr == nullptr) {
        delete alcpCipher;
        FAIL();
    }
    std::vector<Uint8> output(plainText.size());

    // ctr->setKey(128, &key[0]);

    alc_error_t err = ctr->init(&key[0], key.size() * 8, &iv[0], iv.size());

    if (alcp_is_error(err)) {
        std::cout << "Init failed!" << std::endl;
    }

    EXPECT_FALSE(alcp_is_error(err));

    err = ctr->decrypt(&cipherText[0], &output[0], cipherText.size());

    if (alcp_is_error(err)) {
        std::cout << "Decrypt failed!" << std::endl;
    }

    EXPECT_FALSE(alcp_is_error(err));

    delete alcpCipher;
    EXPECT_EQ(plainText, output);
}

TEST(CTR, MultiUpdateEncryption)
{
#ifndef AES_MULTI_UPDATE
    GTEST_SKIP() << "Multi Update functionality unavailable!";
#endif

    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();

    // Test for all arch
    for (CpuCipherFeatures feature : cpu_features) {
        auto alcpCipher = new CipherFactory<iCipher>;
        auto ctr        = alcpCipher->create("aes-ctr-128", feature);

        if (ctr == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        std::vector<Uint8> output(plainText.size());

        alc_error_t err = ctr->init(&key[0], key.size() * 8, &iv[0], iv.size());

        for (Uint64 i = 0; i < plainText.size() / 16; i++) {
            err = ctr->encrypt(&plainText[0] + i * 16,
                               &output[0] + i * 16,
                               16); // 16 byte chunks
            if (alcp_is_error(err)) {
                std::cout << "Encrypt failed!" << std::endl;
            }
            EXPECT_FALSE(alcp_is_error(err));
        }
        delete alcpCipher;
        EXPECT_EQ(cipherText, output);
    }
}

TEST(CTR, MultiUpdateDecryption)
{
#ifndef AES_MULTI_UPDATE
    GTEST_SKIP() << "Multi Update functionality unavailable!";
#endif
    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();

    // Test for all arch
    for (CpuCipherFeatures feature : cpu_features) {
        auto alcpCipher = new CipherFactory<iCipher>;
        auto ctr        = alcpCipher->create("aes-ctr-128", feature);

        if (ctr == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        std::vector<Uint8> output(plainText.size());

        alc_error_t err = ctr->init(&key[0], key.size() * 8, &iv[0], iv.size());

        if (alcp_is_error(err)) {
            std::cout << "Init failed!" << std::endl;
        }

        for (Uint64 i = 0; i < plainText.size() / 16; i++) {
            err =
                ctr->decrypt(&cipherText[0] + i * 16, &output[0] + i * 16, 16);
            if (alcp_is_error(err)) {
                std::cout << "Decrypt failed!" << std::endl;
            }
            EXPECT_FALSE(alcp_is_error(err));
        }
        delete alcpCipher;
        EXPECT_EQ(plainText, output)
            << "FAIL CPU_FEATURE:"
            << std::underlying_type<CpuCipherFeatures>::type(feature);
    }
}

TEST(CTR, RandomEncryptDecryptTest)
{
    Uint8        key_256[32] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe };
    const Uint64 cTextSize   = 100000;
    std::vector<Uint8> plain_text_vect(cTextSize);
    std::vector<Uint8> cipher_text_vect(cTextSize);
    Uint8              iv[16] = {};

    // Fill buffer with random data
    std::unique_ptr<IRandomize> random = std::make_unique<Randomize>(12);
    random->getRandomBytes(plain_text_vect);
    random->getRandomBytes(cipher_text_vect);
    random->getRandomBytes(key_256, 32);
    random->getRandomBytes(iv, 16);

    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();

    for (int i = (cTextSize - 16); i > 16; i -= 16)
        for (CpuCipherFeatures feature : cpu_features) {
#ifdef DEBUG
            std::cout
                << "Cpu Feature:"
                << static_cast<
                       typename std::underlying_type<CpuCipherFeatures>::type>(
                       feature)
                << std::endl;
#endif
            const std::vector<Uint8> plainTextVect(plain_text_vect.begin() + i,
                                                   plain_text_vect.end());
            std::vector<Uint8>       plainTextOut(plainTextVect.size());
            auto                     alcpCipher = new CipherFactory<iCipher>;
            auto ctr = alcpCipher->create("aes-ctr-256", feature);

            if (ctr == nullptr) {
                delete alcpCipher;
                FAIL();
            }
            alc_error_t err = ctr->init(key_256, 256, &iv[0], sizeof(iv));

            if (alcp_is_error(err)) {
                std::cout << "Init failed!" << std::endl;
            }

            EXPECT_FALSE(alcp_is_error(err));

            err = ctr->encrypt(
                &plainTextVect[0], &cipher_text_vect[0], plainTextVect.size());

            if (alcp_is_error(err)) {
                std::cout << "Encrypt failed!" << std::endl;
            }

            EXPECT_FALSE(alcp_is_error(err));

            err = ctr->init(key_256, 256, &iv[0], sizeof(iv));

            if (alcp_is_error(err)) {
                std::cout << "Init failed!" << std::endl;
            }

            EXPECT_FALSE(alcp_is_error(err));

            err = ctr->decrypt(
                &cipher_text_vect[0], &plainTextOut[0], plainTextVect.size());

            if (alcp_is_error(err)) {
                std::cout << "Decrypt failed!" << std::endl;
            }

            EXPECT_FALSE(alcp_is_error(err));

            delete alcpCipher;
            EXPECT_EQ(plainTextVect, plainTextOut);
#ifdef DEBUG
            auto ret = std::mismatch(plainTextVect.begin(),
                                     plainTextVect.end(),
                                     plainTextOut.begin());
            std::cout << "First:" << ret.first - plainTextVect.begin()
                      << "Second:" << ret.second - plainTextOut.begin()
                      << std::endl;
#endif
        }
}

int
main(int argc, char** argv)
{
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
