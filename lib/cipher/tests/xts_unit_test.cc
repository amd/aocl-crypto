/*
 * Copyright (C) 2022-2024, Advanced Micro Devices. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <algorithm>
#include <memory>
#include <random>

#include "alcp/capi/cipher/ctx.hh"
#include "alcp/cipher/aes_xts.hh"
#include "alcp/utils/cpuid.hh"
#include "debug_defs.hh"
#include "dispatcher.hh"
#include "gtest/gtest.h"

#undef DEBUG

using namespace alcp::cipher;

using namespace alcp::cipher::aesni;
// using namespace alcp::cipher::vaes;
// using namespace alcp::cipher::vaes512;

std::string MODE_STR = "XTS";

#define ALC_MODE ALC_AES_MODE_XTS

namespace alcp::cipher::unittest::xts {

// Random Engine
std::random_device rnd_device;
std::mt19937       mt(rnd_device());

template<typename T>
T
randGenerator()
{
    // Generate Random numbers in the field of 2**8
    return static_cast<T>(mt() % 255);
}

/**
 * @brief Fills a vector with random data
 * @param out - Vector to be populated
 * @param len
 *
 */
template<typename T>
void
fillRandom(std::vector<T>& out)
{
    std::generate(out.begin(), out.end(), randGenerator<T>);
}

/**
 * @brief Fills a memory location with random data
 * @param buff - Pointer to buffer
 * @param len - Size of the buffer in multiple of sizeof(T)
 *
 */
template<typename T>
void
fillRandom(T* buff, Uint64 len)
{
    std::generate(buff, buff + len, randGenerator<T>);
}

// KAT Data
typedef std::tuple<std::vector<Uint8>, // key
                   std::vector<Uint8>, // tweak key
                   std::vector<Uint8>, // iv
                   std::vector<Uint8>, // plaintext
                   std::vector<Uint8>  // ciphertext
                   >
                                                 param_tuple;
typedef std::map<const std::string, param_tuple> known_answer_map_t;

/* Example Encodings
P_K128b_TW128b_IV16B_P16B_C16B
P     -> Pass, F -> Fail
K128b -> Key 128 bit
TW128b -> Tweak Key 128 bit
IV7B   -> IV 16 byte
P0B   -> PlainText 16 byte
C0B   -> CipherText 16 byte

Tuple order
{key,nonce,aad,plain,ciphertext,tag}
*/
// clang-format off
known_answer_map_t KATDataset{
    {
        "P_K128b_TW128b_IV16B_P16B_C16B",
        {
            { 0xa1,0xb9,0x0c,0xba,0x3f,0x06,0xac,0x35,0x3b,0x2c,0x34,0x38,0x76,0x08,0x17,0x62},
            { 0x09,0x09,0x23,0x02,0x6e,0x91,0x77,0x18,0x15,0xf2,0x9d,0xab,0x01,0x93,0x2f,0x2f},
            { 0x4f,0xae,0xf7,0x11,0x7c,0xda,0x59,0xc6,0x6e,0x4b,0x92,0x01,0x3e,0x76,0x8a,0xd5},
            { 0xeb,0xab,0xce,0x95,0xb1,0x4d,0x3c,0x8d,0x6f,0xb3,0x50,0x39,0x07,0x90,0x31,0x1c},
            { 0x77,0x8a,0xe8,0xb4,0x3c,0xb9,0x8d,0x5a,0x82,0x50,0x81,0xd5,0xbe,0x47,0x1c,0x63},
        }
    },
#if 0 // Something wrong with this test
    {
        "P_K128b_TW128b_IV16B_P436B_C436B",
        {
            {  0xa1, 0xb9, 0x0c, 0xba, 0x3f, 0x06, 0xac, 0x35, 0x3b, 0x2c, 0x34, 0x38, 0x76, 0x08, 0x17, 0x62 },
            {  0x09, 0x09, 0x23, 0x02, 0x6e, 0x91, 0x77, 0x18, 0x15, 0xf2, 0x9d, 0xab, 0x01, 0x93, 0x2f, 0x2f },
            {  0x4f, 0xae, 0xf7, 0x11, 0x7c, 0xda, 0x59, 0xc6, 0x6e, 0x4b, 0x92, 0x01, 0x3e, 0x76, 0x8a, 0xd5 },
            { 0xa8, 0xac, 0xf5, 0x7a, 0x6f, 0x86, 0x59, 0xe9, 0xba, 0x38, 0x2a, 0x4d,
                0x16, 0xba, 0xf1, 0x2a, 0x67, 0xd5, 0x43, 0x75, 0x63, 0xfd, 0x63, 0x29,
                0xd9, 0xa8, 0x87, 0xa8, 0x1,  0x4a, 0x10, 0x57, 0x63, 0xe2, 0xfd, 0xa1,
                0xc6, 0x9f, 0x7d, 0xb6, 0x8,  0x54, 0x1d, 0x7f, 0x11, 0xbc, 0xeb, 0xa9,
                0x95, 0x53, 0xa7, 0x8b, 0xc0, 0xae, 0xac, 0x5f, 0xa8, 0xf7, 0x42, 0x6f,
                0xc6, 0x92, 0xa8, 0x4b, 0xe8, 0x46, 0xed, 0xae, 0xa0, 0xdd, 0x67, 0x70,
                0xde, 0xc3, 0xc9, 0x80, 0x90, 0xc8, 0x9c, 0x96, 0xdf, 0x54, 0xee, 0x7b,
                0x81, 0x8e, 0x70, 0xf7, 0x4c, 0x8b, 0x4d, 0x1,  0xd2, 0xf1, 0x53, 0x5f,
                0x64, 0xc1, 0xd,  0x82, 0x79, 0x86, 0xe3, 0x14, 0xbe, 0xae, 0xe4, 0x4,
                0xa,  0x3b, 0x23, 0x63, 0x28, 0xc,  0x3b, 0xd7, 0x43, 0x75, 0xfa, 0xda,
                0x4c, 0x80, 0x7a, 0x96, 0x1d, 0x69, 0xdc, 0x33, 0x77, 0x70, 0xb9, 0x52,
                0x17, 0x13, 0x10, 0x4f, 0x8,  0xbc, 0x6,  0x0,  0x95, 0x19, 0xea, 0xc,
                0x53, 0x28, 0x8a, 0xf5, 0xf,  0xa6, 0x2,  0x48, 0x1b, 0xde, 0x99, 0x84,
                0x93, 0x71, 0xeb, 0x69, 0x2d, 0x38, 0x44, 0x9a, 0xba, 0x1a, 0x35, 0xae,
                0xeb, 0x71, 0x16, 0xba, 0xe1, 0x1,  0x7c, 0x57, 0xfc, 0xfa, 0xd3, 0x5f,
                0xd6, 0xb9, 0x64, 0x68, 0x70, 0xcf, 0x6d, 0xa3, 0xd4, 0x10, 0x40, 0x10,
                0x39, 0x80, 0xa9, 0x38, 0x30, 0x13, 0xf6, 0x8a, 0x54, 0x10, 0x2d, 0xcd,
                0x44, 0x42, 0xec, 0x9,  0xb1, 0x4f, 0xd1, 0xf3, 0xf5, 0x25, 0xfa, 0x12,
                0x33, 0xa6, 0x6d, 0x44, 0x48, 0xf9, 0x66, 0x54, 0x14, 0x1d, 0x7d, 0x91,
                0x43, 0x0,  0x98, 0xa7, 0xd6, 0xda, 0x2e, 0x25, 0x7e, 0x50, 0xeb, 0xd6,
                0x7e, 0xdb, 0x39, 0xa8, 0x61, 0xf1, 0x1a, 0xda, 0xf6, 0x2a, 0x42, 0x86,
                0x3a, 0xbc, 0x57, 0x5c, 0xbb, 0x8d, 0xed, 0x4e, 0xa5, 0xc4, 0x9f, 0x88,
                0x37, 0x8,  0xcb, 0x13, 0x1f, 0xff, 0x91, 0xcd, 0x1a, 0xbb, 0x9d, 0x9,
                0x13, 0x95, 0xc,  0x29, 0x94, 0x55, 0xde, 0xb3, 0x34, 0xca, 0x8,  0x38,
                0xe5, 0x62, 0x9f, 0x1d, 0x29, 0x66, 0x55, 0x89, 0x82, 0x5c, 0xc,  0xc5,
                0xf2, 0xb3, 0xfb, 0x6a, 0xd7, 0x3b, 0x1c, 0xb6, 0x1f, 0xae, 0x39, 0xa6,
                0xbb, 0x4,  0x2b, 0x99, 0x33, 0x6b, 0xdb, 0xda, 0x3a, 0xb6, 0x54, 0xa0,
                0xf8, 0x4d, 0xba, 0xfc, 0x3f, 0xd0, 0x2d, 0x7f, 0x2c, 0xe9, 0x62, 0x76,
                0xb0, 0x7d, 0x5a, 0xc8, 0xb6, 0xe4, 0xcf, 0xa,  0x8d, 0x4a, 0xee, 0xbc,
                0x62, 0xf8, 0x31, 0x5d, 0xe0, 0xe0, 0x36, 0x71, 0x8f, 0x27, 0x61, 0xed,
                0x76, 0x51, 0x56, 0xcf, 0xa2, 0x5f, 0x6e, 0xba, 0x2e, 0x3f, 0xe4, 0x33,
                0xa1, 0xdb, 0x71, 0xb6, 0xdd, 0x38, 0xd1, 0xdd, 0x8c, 0x45, 0xc3, 0x93,
                0x4d, 0xe0, 0x3c, 0x8a, 0x49, 0xb7, 0x8d, 0xa4, 0x5,  0xe9, 0x85, 0x9,
                0xed, 0x87, 0x2f, 0xc4, 0xa7, 0x3d, 0xc5, 0xa4, 0x42, 0x6e, 0xca, 0x59,
                0x4,  0x39, 0x8,  0x71, 0x55, 0x4b, 0xad, 0x6d, 0x3d, 0x47, 0xf6, 0x72,
                0x10, 0xcb, 0xa5, 0xde, 0xac, 0x9f, 0x71, 0x32, 0xd9, 0x2a, 0xa3, 0x29,
                0xd,  0xf8, 0x2,  0x5a },
            { 0x41, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x20,
                0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20,
                0x6f, 0x66, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
                0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x72,
                0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20,
                0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x61, 0x6e,
                0x64, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x65,
                0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73,
                0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e,
                0x20, 0x41, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x65, 0x76, 0x65, 0x72,
                0x79, 0x20, 0x70, 0x69, 0x65, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x77,
                0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x64,
                0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x6f,
                0x6e, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x20,
                0x66, 0x65, 0x77, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
                0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20,
                0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x69, 0x6e,
                0x74, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
                0x73, 0x2e, 0x41, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
                0x68, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65,
                0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
                0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20,
                0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x61, 0x6e,
                0x64, 0x20, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x20,
                0x61, 0x6e, 0x64, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20,
                0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61,
                0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x69,
                0x63, 0x2e, 0x20, 0x41, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x65, 0x76,
                0x65, 0x72, 0x79, 0x20, 0x70, 0x69, 0x65, 0x63, 0x65, 0x20, 0x6f, 0x66,
                0x20, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x79, 0x6f, 0x75,
                0x20, 0x64, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20,
                0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20,
                0x61, 0x20, 0x66, 0x65, 0x77, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
                0x63, 0x65, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,
                0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x20,
                0x69, 0x6e, 0x74, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
                0x70, 0x68, 0x73, 0x2e },
        }
    }
#endif 
};
// clang-format on
} // namespace alcp::cipher::unittest::xts
using namespace alcp::cipher::unittest;
using namespace alcp::cipher::unittest::xts;
TEST(XTS, initiantiation_with_valid_input)
{
    Uint8 key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };

    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();
    for (CpuCipherFeatures feature : cpu_features) {
        auto alcpCipher = new CipherFactory<iCipher>;
        auto xts        = alcpCipher->create("aes-xts-128", feature);

        alc_error_t err = ALC_ERROR_NONE;

        if (xts == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        err = xts->init(key, 128, nullptr, 0);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        delete alcpCipher;
    }
}

TEST(XTS, valid_all_sizes_encrypt_decrypt_test)
{
    // clang-format off
    Uint8 iv[16]     = { 0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                         0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x60 };
    Uint8 key[]      = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                         0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                         0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                         0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                         0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                         0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                         0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                         0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00 };
    // clang-format on
    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();
    for (CpuCipherFeatures feature : cpu_features) {
        for (int i = 16; i < 512 * 20; i++) {
            auto alcpCipher = new CipherFactory<iCipher>;
            auto xts        = alcpCipher->create("aes-xts-256", feature);

            if (xts == nullptr) {
                delete alcpCipher;
                FAIL();
            }
            alc_error_t err = xts->init(key, 256, iv, 16);
            EXPECT_EQ(err, ALC_ERROR_NONE);

            std::vector<Uint8> plainText(i, 0);
            Uint64             ct_size = i;
            auto               dest    = std::make_unique<Uint8[]>(i);
            fillRandom(plainText);

            err = xts->encrypt(&(plainText[0]), dest.get(), ct_size);
            EXPECT_EQ(err, ALC_ERROR_NONE);

            std::vector<Uint8> pt(i, 0);

            err = xts->init(key, 256, iv, 16);
            EXPECT_EQ(err, ALC_ERROR_NONE);
            err = xts->decrypt(dest.get(), &(pt[0]), ct_size);

            EXPECT_TRUE(err == ALC_ERROR_NONE);
            EXPECT_EQ(plainText, pt);

            delete alcpCipher;
        }
    }
}

TEST(XTS, encrypt_huge)
{
    Uint8 key[32] = { 0x85, 0xe8, 0xe2, 0x6d, 0x8f, 0x68, 0xcb, 0xd7,
                      0x90, 0x91, 0x26, 0x0c, 0x07, 0xc2, 0x1f, 0x30,
                      0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                      0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x61 };
    Uint8 iv[16]  = { 0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                     0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x60 };

    std::vector<Uint8> plainText = {
        0xf4, 0x2f, 0xa5, 0x55, 0xea, 0x94, 0x71, 0x0a, 0x20, 0xab, 0x16, 0x4b,
        0xe1, 0x9f, 0xca, 0x8b, 0x2a, 0x2d, 0x24, 0xc6, 0x9c, 0x74, 0xe2, 0xdf,
        0x08, 0xf5, 0xbb, 0x3a, 0x5c, 0x97, 0x11, 0xe9, 0x9c, 0xf3, 0x1f, 0x38,
        0x29, 0xbe, 0x85, 0xae, 0x1c, 0xfd, 0x6e, 0xa0, 0xaa, 0xbf, 0xb8, 0x16,
        0xba, 0x07, 0x6a, 0x91, 0xad, 0x38, 0x6e, 0x83, 0xfa, 0xa4, 0x7b, 0x44,
        0x36, 0x77, 0xb8, 0xc3, 0x0f, 0xb0, 0x3a, 0x89, 0xc6, 0x9f, 0x2d, 0x00,
        0x30, 0x06, 0x0a, 0xe8, 0x6b, 0x2f, 0x92, 0xa1, 0xb8, 0x80, 0xcd, 0x30,
        0x0f, 0x91, 0x40, 0xaf, 0x2e, 0x90, 0xe6, 0x2b, 0x38, 0x49, 0x85, 0x31,
        0xa0, 0x29, 0x46, 0xc5, 0x8a, 0x0c, 0x64, 0xfb, 0x53, 0x99, 0xea, 0xfb,
        0xb8, 0x3d, 0x9e, 0x2f, 0xf7, 0x08, 0x4f, 0x9c, 0xf5, 0x5a, 0xdc, 0x95,
        0x38, 0x82, 0xb1, 0x7d, 0x59, 0xe7, 0x4b, 0xac, 0xe0, 0x6a, 0x95, 0x25,
        0xd5, 0xce, 0x09, 0xac, 0x6e, 0xca, 0xe1, 0xa9, 0x6f, 0x4f, 0x06, 0xef,
        0x3f, 0x2e, 0xa9, 0x96, 0xfd, 0xba, 0x0c, 0x2b, 0xd8, 0x29, 0x06, 0xdc,
        0x19, 0x7b, 0x32, 0xdf, 0xf9, 0x7a, 0xe3, 0xc5, 0x9c, 0x93, 0xa1, 0x73,
        0x97, 0x25, 0xc9, 0x2b, 0x5e, 0x25, 0xfd, 0xc2, 0x3e, 0x9f, 0xa9, 0x8a,
        0x98, 0xf0, 0xa5, 0x1b, 0x85, 0xb2, 0x4c, 0x6b, 0xe3, 0x47, 0x3f, 0x97,
        0xf7, 0x60, 0x41, 0x47, 0x4b, 0x56, 0xf2, 0x52, 0xe6, 0xfd, 0x9f
    };

    std::vector<Uint8> cipherText = {
        0x69, 0xd2, 0xf0, 0xa7, 0x32, 0x61, 0x95, 0x80, 0x09, 0x50, 0x57, 0xdc,
        0x60, 0xa0, 0x66, 0xdb, 0x17, 0x68, 0x8e, 0x14, 0x26, 0xc8, 0x7a, 0x07,
        0xc7, 0xea, 0xc8, 0x5b, 0x58, 0x3b, 0xc5, 0x16, 0x51, 0x9a, 0x69, 0x49,
        0x6a, 0x65, 0x09, 0xa9, 0xb7, 0xa6, 0x06, 0x2d, 0x85, 0xba, 0xd3, 0xf4,
        0x0c, 0x39, 0x55, 0x0c, 0x0c, 0x64, 0xf8, 0x25, 0xa6, 0xab, 0xe6, 0x51,
        0x57, 0x44, 0xd9, 0x9e, 0x48, 0x03, 0x0d, 0xd4, 0x1e, 0x97, 0xf9, 0x0c,
        0xa0, 0x97, 0x3d, 0x9f, 0x2e, 0x32, 0x65, 0xee, 0x75, 0xea, 0xb6, 0xc6,
        0x18, 0x09, 0x67, 0xb4, 0x8a, 0xcb, 0x54, 0xd2, 0x03, 0xdc, 0x0b, 0x5a,
        0xc1, 0x9e, 0xf5, 0x2f, 0xf3, 0xb7, 0x76, 0x2c, 0xe0, 0xaf, 0x8d, 0x4e,
        0x03, 0xa5, 0x85, 0x3f, 0xa7, 0x54, 0x29, 0x7f, 0xb2, 0x7e, 0x65, 0xe9,
        0xca, 0x83, 0x2d, 0x5f, 0x7e, 0x95, 0xa3, 0x69, 0x2f, 0xe9, 0xb1, 0x83,
        0xee, 0x5e, 0x87, 0xad, 0x9c, 0x03, 0x36, 0x4c, 0x52, 0x28, 0x60, 0xc9,
        0xb9, 0x14, 0xb9, 0xdf, 0x1a, 0x02, 0xe4, 0x4f, 0x09, 0xa2, 0x75, 0x53,
        0xdc, 0xa6, 0xc2, 0xdc, 0x0c, 0x4c, 0x26, 0xec, 0x0c, 0x07, 0xa4, 0x68,
        0x62, 0x6d, 0xf1, 0x15, 0x58, 0xaa, 0x14, 0xd2, 0x8e, 0x1f, 0x68, 0xe5,
        0x18, 0x28, 0x14, 0xff, 0xba, 0x52, 0x2f, 0x32, 0x22, 0x91, 0x81, 0x53,
        0x4e, 0x28, 0x0e, 0x2b, 0x11, 0x04, 0x8e, 0xe4, 0xab, 0x6e, 0xe1
    };
    alc_error_t err = ALC_ERROR_NONE;

    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();
    for (CpuCipherFeatures feature : cpu_features) {
#ifdef DEBUG
        std::cout
            << "Cpu Feature:"
            << static_cast<
                   typename std::underlying_type<CpuCipherFeatures>::type>(
                   feature)
            << std::endl;
#endif
        auto alcpCipher = new CipherFactory<iCipher>;
        auto xts        = alcpCipher->create("aes-xts-128", feature);

        if (xts == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        err = xts->init(key, 128, iv, 16);

        EXPECT_TRUE(err == ALC_ERROR_NONE);

        std::vector<Uint8> output_buffer(plainText.size(), 0x0);

        err = xts->encrypt(
            &(plainText[0]), &(output_buffer[0]), output_buffer.size());

        EXPECT_TRUE(err == ALC_ERROR_NONE);

        delete alcpCipher;

        ASSERT_EQ(output_buffer, cipherText);
    }
}

TEST(XTS, decrypt_huge)
{
    Uint8 key[32] = { 0x85, 0xe8, 0xe2, 0x6d, 0x8f, 0x68, 0xcb, 0xd7,
                      0x90, 0x91, 0x26, 0x0c, 0x07, 0xc2, 0x1f, 0x30,
                      0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                      0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x61 };
    Uint8 iv[16]  = { 0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                     0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x60 };

    std::vector<Uint8> plainText = {
        0xf4, 0x2f, 0xa5, 0x55, 0xea, 0x94, 0x71, 0x0a, 0x20, 0xab, 0x16, 0x4b,
        0xe1, 0x9f, 0xca, 0x8b, 0x2a, 0x2d, 0x24, 0xc6, 0x9c, 0x74, 0xe2, 0xdf,
        0x08, 0xf5, 0xbb, 0x3a, 0x5c, 0x97, 0x11, 0xe9, 0x9c, 0xf3, 0x1f, 0x38,
        0x29, 0xbe, 0x85, 0xae, 0x1c, 0xfd, 0x6e, 0xa0, 0xaa, 0xbf, 0xb8, 0x16,
        0xba, 0x07, 0x6a, 0x91, 0xad, 0x38, 0x6e, 0x83, 0xfa, 0xa4, 0x7b, 0x44,
        0x36, 0x77, 0xb8, 0xc3, 0x0f, 0xb0, 0x3a, 0x89, 0xc6, 0x9f, 0x2d, 0x00,
        0x30, 0x06, 0x0a, 0xe8, 0x6b, 0x2f, 0x92, 0xa1, 0xb8, 0x80, 0xcd, 0x30,
        0x0f, 0x91, 0x40, 0xaf, 0x2e, 0x90, 0xe6, 0x2b, 0x38, 0x49, 0x85, 0x31,
        0xa0, 0x29, 0x46, 0xc5, 0x8a, 0x0c, 0x64, 0xfb, 0x53, 0x99, 0xea, 0xfb,
        0xb8, 0x3d, 0x9e, 0x2f, 0xf7, 0x08, 0x4f, 0x9c, 0xf5, 0x5a, 0xdc, 0x95,
        0x38, 0x82, 0xb1, 0x7d, 0x59, 0xe7, 0x4b, 0xac, 0xe0, 0x6a, 0x95, 0x25,
        0xd5, 0xce, 0x09, 0xac, 0x6e, 0xca, 0xe1, 0xa9, 0x6f, 0x4f, 0x06, 0xef,
        0x3f, 0x2e, 0xa9, 0x96, 0xfd, 0xba, 0x0c, 0x2b, 0xd8, 0x29, 0x06, 0xdc,
        0x19, 0x7b, 0x32, 0xdf, 0xf9, 0x7a, 0xe3, 0xc5, 0x9c, 0x93, 0xa1, 0x73,
        0x97, 0x25, 0xc9, 0x2b, 0x5e, 0x25, 0xfd, 0xc2, 0x3e, 0x9f, 0xa9, 0x8a,
        0x98, 0xf0, 0xa5, 0x1b, 0x85, 0xb2, 0x4c, 0x6b, 0xe3, 0x47, 0x3f, 0x97,
        0xf7, 0x60, 0x41, 0x47, 0x4b, 0x56, 0xf2, 0x52, 0xe6, 0xfd, 0x9f
    };

    std::vector<Uint8> cipherText = {
        0x69, 0xd2, 0xf0, 0xa7, 0x32, 0x61, 0x95, 0x80, 0x09, 0x50, 0x57, 0xdc,
        0x60, 0xa0, 0x66, 0xdb, 0x17, 0x68, 0x8e, 0x14, 0x26, 0xc8, 0x7a, 0x07,
        0xc7, 0xea, 0xc8, 0x5b, 0x58, 0x3b, 0xc5, 0x16, 0x51, 0x9a, 0x69, 0x49,
        0x6a, 0x65, 0x09, 0xa9, 0xb7, 0xa6, 0x06, 0x2d, 0x85, 0xba, 0xd3, 0xf4,
        0x0c, 0x39, 0x55, 0x0c, 0x0c, 0x64, 0xf8, 0x25, 0xa6, 0xab, 0xe6, 0x51,
        0x57, 0x44, 0xd9, 0x9e, 0x48, 0x03, 0x0d, 0xd4, 0x1e, 0x97, 0xf9, 0x0c,
        0xa0, 0x97, 0x3d, 0x9f, 0x2e, 0x32, 0x65, 0xee, 0x75, 0xea, 0xb6, 0xc6,
        0x18, 0x09, 0x67, 0xb4, 0x8a, 0xcb, 0x54, 0xd2, 0x03, 0xdc, 0x0b, 0x5a,
        0xc1, 0x9e, 0xf5, 0x2f, 0xf3, 0xb7, 0x76, 0x2c, 0xe0, 0xaf, 0x8d, 0x4e,
        0x03, 0xa5, 0x85, 0x3f, 0xa7, 0x54, 0x29, 0x7f, 0xb2, 0x7e, 0x65, 0xe9,
        0xca, 0x83, 0x2d, 0x5f, 0x7e, 0x95, 0xa3, 0x69, 0x2f, 0xe9, 0xb1, 0x83,
        0xee, 0x5e, 0x87, 0xad, 0x9c, 0x03, 0x36, 0x4c, 0x52, 0x28, 0x60, 0xc9,
        0xb9, 0x14, 0xb9, 0xdf, 0x1a, 0x02, 0xe4, 0x4f, 0x09, 0xa2, 0x75, 0x53,
        0xdc, 0xa6, 0xc2, 0xdc, 0x0c, 0x4c, 0x26, 0xec, 0x0c, 0x07, 0xa4, 0x68,
        0x62, 0x6d, 0xf1, 0x15, 0x58, 0xaa, 0x14, 0xd2, 0x8e, 0x1f, 0x68, 0xe5,
        0x18, 0x28, 0x14, 0xff, 0xba, 0x52, 0x2f, 0x32, 0x22, 0x91, 0x81, 0x53,
        0x4e, 0x28, 0x0e, 0x2b, 0x11, 0x04, 0x8e, 0xe4, 0xab, 0x6e, 0xe1
    };
    alc_error_t                    err          = ALC_ERROR_NONE;
    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();
    for (CpuCipherFeatures feature : cpu_features) {
        std::vector<Uint8> output_buffer(cipherText.size(), 0xff);

        auto alcpCipher = new CipherFactory<iCipher>;
        auto xts        = alcpCipher->create("aes-xts-128", feature);

        if (xts == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        err = xts->init(key, 128, iv, 16);

        EXPECT_TRUE(err == ALC_ERROR_NONE);

        err = xts->decrypt(
            &(cipherText[0]), &(output_buffer[0]), output_buffer.size());

        EXPECT_TRUE(err == ALC_ERROR_NONE);

        delete alcpCipher;
        ASSERT_EQ(output_buffer, plainText);
    }
}
TEST(XTS, encrypt_huge_multi_update)
{
#ifndef AES_MULTI_UPDATE
    GTEST_SKIP() << "Multi Update functionality unavailable!";
#endif
    Uint8 key[32] = { 0x85, 0xe8, 0xe2, 0x6d, 0x8f, 0x68, 0xcb, 0xd7,
                      0x90, 0x91, 0x26, 0x0c, 0x07, 0xc2, 0x1f, 0x30,
                      0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                      0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x61 };
    Uint8 iv[16]  = { 0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                     0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x60 };

    std::vector<Uint8> plainText = {
        0xf4, 0x2f, 0xa5, 0x55, 0xea, 0x94, 0x71, 0x0a, 0x20, 0xab, 0x16, 0x4b,
        0xe1, 0x9f, 0xca, 0x8b, 0x2a, 0x2d, 0x24, 0xc6, 0x9c, 0x74, 0xe2, 0xdf,
        0x08, 0xf5, 0xbb, 0x3a, 0x5c, 0x97, 0x11, 0xe9, 0x9c, 0xf3, 0x1f, 0x38,
        0x29, 0xbe, 0x85, 0xae, 0x1c, 0xfd, 0x6e, 0xa0, 0xaa, 0xbf, 0xb8, 0x16,
        0xba, 0x07, 0x6a, 0x91, 0xad, 0x38, 0x6e, 0x83, 0xfa, 0xa4, 0x7b, 0x44,
        0x36, 0x77, 0xb8, 0xc3, 0x0f, 0xb0, 0x3a, 0x89, 0xc6, 0x9f, 0x2d, 0x00,
        0x30, 0x06, 0x0a, 0xe8, 0x6b, 0x2f, 0x92, 0xa1, 0xb8, 0x80, 0xcd, 0x30,
        0x0f, 0x91, 0x40, 0xaf, 0x2e, 0x90, 0xe6, 0x2b, 0x38, 0x49, 0x85, 0x31,
        0xa0, 0x29, 0x46, 0xc5, 0x8a, 0x0c, 0x64, 0xfb, 0x53, 0x99, 0xea, 0xfb,
        0xb8, 0x3d, 0x9e, 0x2f, 0xf7, 0x08, 0x4f, 0x9c, 0xf5, 0x5a, 0xdc, 0x95,
        0x38, 0x82, 0xb1, 0x7d, 0x59, 0xe7, 0x4b, 0xac, 0xe0, 0x6a, 0x95, 0x25,
        0xd5, 0xce, 0x09, 0xac, 0x6e, 0xca, 0xe1, 0xa9, 0x6f, 0x4f, 0x06, 0xef,
        0x3f, 0x2e, 0xa9, 0x96, 0xfd, 0xba, 0x0c, 0x2b, 0xd8, 0x29, 0x06, 0xdc,
        0x19, 0x7b, 0x32, 0xdf, 0xf9, 0x7a, 0xe3, 0xc5, 0x9c, 0x93, 0xa1, 0x73,
        0x97, 0x25, 0xc9, 0x2b, 0x5e, 0x25, 0xfd, 0xc2, 0x3e, 0x9f, 0xa9, 0x8a,
        0x98, 0xf0, 0xa5, 0x1b, 0x85, 0xb2, 0x4c, 0x6b, 0xe3, 0x47, 0x3f, 0x97,
        0xf7, 0x60, 0x41, 0x47, 0x4b, 0x56, 0xf2, 0x52, 0xe6, 0xfd, 0x9f
    }; // 203 bytes

    std::vector<Uint8> cipherText = {
        0x69, 0xd2, 0xf0, 0xa7, 0x32, 0x61, 0x95, 0x80, 0x09, 0x50, 0x57, 0xdc,
        0x60, 0xa0, 0x66, 0xdb, 0x17, 0x68, 0x8e, 0x14, 0x26, 0xc8, 0x7a, 0x07,
        0xc7, 0xea, 0xc8, 0x5b, 0x58, 0x3b, 0xc5, 0x16, 0x51, 0x9a, 0x69, 0x49,
        0x6a, 0x65, 0x09, 0xa9, 0xb7, 0xa6, 0x06, 0x2d, 0x85, 0xba, 0xd3, 0xf4,
        0x0c, 0x39, 0x55, 0x0c, 0x0c, 0x64, 0xf8, 0x25, 0xa6, 0xab, 0xe6, 0x51,
        0x57, 0x44, 0xd9, 0x9e, 0x48, 0x03, 0x0d, 0xd4, 0x1e, 0x97, 0xf9, 0x0c,
        0xa0, 0x97, 0x3d, 0x9f, 0x2e, 0x32, 0x65, 0xee, 0x75, 0xea, 0xb6, 0xc6,
        0x18, 0x09, 0x67, 0xb4, 0x8a, 0xcb, 0x54, 0xd2, 0x03, 0xdc, 0x0b, 0x5a,
        0xc1, 0x9e, 0xf5, 0x2f, 0xf3, 0xb7, 0x76, 0x2c, 0xe0, 0xaf, 0x8d, 0x4e,
        0x03, 0xa5, 0x85, 0x3f, 0xa7, 0x54, 0x29, 0x7f, 0xb2, 0x7e, 0x65, 0xe9,
        0xca, 0x83, 0x2d, 0x5f, 0x7e, 0x95, 0xa3, 0x69, 0x2f, 0xe9, 0xb1, 0x83,
        0xee, 0x5e, 0x87, 0xad, 0x9c, 0x03, 0x36, 0x4c, 0x52, 0x28, 0x60, 0xc9,
        0xb9, 0x14, 0xb9, 0xdf, 0x1a, 0x02, 0xe4, 0x4f, 0x09, 0xa2, 0x75, 0x53,
        0xdc, 0xa6, 0xc2, 0xdc, 0x0c, 0x4c, 0x26, 0xec, 0x0c, 0x07, 0xa4, 0x68,
        0x62, 0x6d, 0xf1, 0x15, 0x58, 0xaa, 0x14, 0xd2, 0x8e, 0x1f, 0x68, 0xe5,
        0x18, 0x28, 0x14, 0xff, 0xba, 0x52, 0x2f, 0x32, 0x22, 0x91, 0x81, 0x53,
        0x4e, 0x28, 0x0e, 0x2b, 0x11, 0x04, 0x8e, 0xe4, 0xab, 0x6e, 0xe1
    };

    alc_error_t err = ALC_ERROR_NONE;

    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();
    for (CpuCipherFeatures feature : cpu_features) {

        std::vector<Uint8> output_buffer(plainText.size(), 0xff);
        auto               alcpCipher = new CipherFactory<iCipher>;
        auto               xts = alcpCipher->create("aes-xts-128", feature);

        if (xts == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        err = xts->init(key, 128, iv, 16);

        Uint64 res = plainText.size() % 16;
        if (plainText.size() >= (16 + res)) {
            Uint64 extra_update_size = 0;
            Uint64 multi_update_size = 0;
            Uint8* curr_pt           = &(plainText[0]);
            Uint8* curr_ot           = &(output_buffer[0]);
            if (res) {
                // If partial bock, give 2 blocks at a time.
                multi_update_size = plainText.size() - 16 - res;
                extra_update_size = 16 + res;
            } else {
                multi_update_size = plainText.size();
            }
            while (multi_update_size > 0) {
                err = xts->encrypt(curr_pt, curr_ot, 16);

                EXPECT_FALSE(alcp_is_error(err));
                multi_update_size -= 16;
                curr_ot += 16;
                curr_pt += 16;
            }
            // Last 2 blocks if available
            if (extra_update_size) {
                err = xts->encrypt(curr_pt, curr_ot, extra_update_size);

                EXPECT_FALSE(alcp_is_error(err));
            }
        }

#if 0
    auto ret = std::mismatch(
        cipherText.begin(), cipherText.end(), output_buffer.begin());
    std::cout << "First:" << ret.first - cipherText.begin()
              << "Second:" << ret.second - output_buffer.begin() << std::endl;
#endif

        delete alcpCipher;
        ASSERT_EQ(output_buffer, cipherText);
    }
}

TEST(XTS, encrypt_huge_multi_update_serial)
{
#ifndef AES_MULTI_UPDATE
    GTEST_SKIP() << "Multi Update functionality unavailable!";
#endif
    Uint8 key[32] = { 0x85, 0xe8, 0xe2, 0x6d, 0x8f, 0x68, 0xcb, 0xd7,
                      0x90, 0x91, 0x26, 0x0c, 0x07, 0xc2, 0x1f, 0x30,
                      0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                      0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x61 };
    Uint8 iv[16]  = { 0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                     0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x60 };

    std::vector<Uint8> plainText = {
        0xf4, 0x2f, 0xa5, 0x55, 0xea, 0x94, 0x71, 0x0a, 0x20, 0xab, 0x16, 0x4b,
        0xe1, 0x9f, 0xca, 0x8b, 0x2a, 0x2d, 0x24, 0xc6, 0x9c, 0x74, 0xe2, 0xdf,
        0x08, 0xf5, 0xbb, 0x3a, 0x5c, 0x97, 0x11, 0xe9, 0x9c, 0xf3, 0x1f, 0x38,
        0x29, 0xbe, 0x85, 0xae, 0x1c, 0xfd, 0x6e, 0xa0, 0xaa, 0xbf, 0xb8, 0x16,
        0xba, 0x07, 0x6a, 0x91, 0xad, 0x38, 0x6e, 0x83, 0xfa, 0xa4, 0x7b, 0x44,
        0x36, 0x77, 0xb8, 0xc3, 0x0f, 0xb0, 0x3a, 0x89, 0xc6, 0x9f, 0x2d, 0x00,
        0x30, 0x06, 0x0a, 0xe8, 0x6b, 0x2f, 0x92, 0xa1, 0xb8, 0x80, 0xcd, 0x30,
        0x0f, 0x91, 0x40, 0xaf, 0x2e, 0x90, 0xe6, 0x2b, 0x38, 0x49, 0x85, 0x31,
        0xa0, 0x29, 0x46, 0xc5, 0x8a, 0x0c, 0x64, 0xfb, 0x53, 0x99, 0xea, 0xfb,
        0xb8, 0x3d, 0x9e, 0x2f, 0xf7, 0x08, 0x4f, 0x9c, 0xf5, 0x5a, 0xdc, 0x95,
        0x38, 0x82, 0xb1, 0x7d, 0x59, 0xe7, 0x4b, 0xac, 0xe0, 0x6a, 0x95, 0x25,
        0xd5, 0xce, 0x09, 0xac, 0x6e, 0xca, 0xe1, 0xa9, 0x6f, 0x4f, 0x06, 0xef,
        0x3f, 0x2e, 0xa9, 0x96, 0xfd, 0xba, 0x0c, 0x2b, 0xd8, 0x29, 0x06, 0xdc,
        0x19, 0x7b, 0x32, 0xdf, 0xf9, 0x7a, 0xe3, 0xc5, 0x9c, 0x93, 0xa1, 0x73,
        0x97, 0x25, 0xc9, 0x2b, 0x5e, 0x25, 0xfd, 0xc2, 0x3e, 0x9f, 0xa9, 0x8a,
        0x98, 0xf0, 0xa5, 0x1b, 0x85, 0xb2, 0x4c, 0x6b, 0xe3, 0x47, 0x3f, 0x97,
        0xf7, 0x60, 0x41, 0x47, 0x4b, 0x56, 0xf2, 0x52, 0xe6, 0xfd, 0x9f
    }; // 203 bytes

    std::vector<Uint8> cipherText = {
        0x69, 0xd2, 0xf0, 0xa7, 0x32, 0x61, 0x95, 0x80, 0x09, 0x50, 0x57, 0xdc,
        0x60, 0xa0, 0x66, 0xdb, 0x17, 0x68, 0x8e, 0x14, 0x26, 0xc8, 0x7a, 0x07,
        0xc7, 0xea, 0xc8, 0x5b, 0x58, 0x3b, 0xc5, 0x16, 0x51, 0x9a, 0x69, 0x49,
        0x6a, 0x65, 0x09, 0xa9, 0xb7, 0xa6, 0x06, 0x2d, 0x85, 0xba, 0xd3, 0xf4,
        0x0c, 0x39, 0x55, 0x0c, 0x0c, 0x64, 0xf8, 0x25, 0xa6, 0xab, 0xe6, 0x51,
        0x57, 0x44, 0xd9, 0x9e, 0x48, 0x03, 0x0d, 0xd4, 0x1e, 0x97, 0xf9, 0x0c,
        0xa0, 0x97, 0x3d, 0x9f, 0x2e, 0x32, 0x65, 0xee, 0x75, 0xea, 0xb6, 0xc6,
        0x18, 0x09, 0x67, 0xb4, 0x8a, 0xcb, 0x54, 0xd2, 0x03, 0xdc, 0x0b, 0x5a,
        0xc1, 0x9e, 0xf5, 0x2f, 0xf3, 0xb7, 0x76, 0x2c, 0xe0, 0xaf, 0x8d, 0x4e,
        0x03, 0xa5, 0x85, 0x3f, 0xa7, 0x54, 0x29, 0x7f, 0xb2, 0x7e, 0x65, 0xe9,
        0xca, 0x83, 0x2d, 0x5f, 0x7e, 0x95, 0xa3, 0x69, 0x2f, 0xe9, 0xb1, 0x83,
        0xee, 0x5e, 0x87, 0xad, 0x9c, 0x03, 0x36, 0x4c, 0x52, 0x28, 0x60, 0xc9,
        0xb9, 0x14, 0xb9, 0xdf, 0x1a, 0x02, 0xe4, 0x4f, 0x09, 0xa2, 0x75, 0x53,
        0xdc, 0xa6, 0xc2, 0xdc, 0x0c, 0x4c, 0x26, 0xec, 0x0c, 0x07, 0xa4, 0x68,
        0x62, 0x6d, 0xf1, 0x15, 0x58, 0xaa, 0x14, 0xd2, 0x8e, 0x1f, 0x68, 0xe5,
        0x18, 0x28, 0x14, 0xff, 0xba, 0x52, 0x2f, 0x32, 0x22, 0x91, 0x81, 0x53,
        0x4e, 0x28, 0x0e, 0x2b, 0x11, 0x04, 0x8e, 0xe4, 0xab, 0x6e, 0xe1
    };
    alc_error_t err = ALC_ERROR_NONE;

    std::vector<Uint8> output_buffer(plainText.size(), 0xff);

    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();
    for (CpuCipherFeatures feature : cpu_features) {
        auto alcpCipher = new CipherFactory<iCipherSeg>;
        auto xts        = alcpCipher->create("aes-xts-128", feature);

        if (xts == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        err = xts->init(key, 128, iv, 16);

        err = xts->encryptSegment(
            &(plainText[0]) + (5 * 16), &(output_buffer[0]) + (5 * 16), 16, 5);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encryptSegment(&(plainText[0]) + (10 * 16),
                                  &(output_buffer[0]) + (10 * 16),
                                  16,
                                  10);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encryptSegment(
            &(plainText[0]) + (0 * 16), &(output_buffer[0]) + (0 * 16), 16, 0);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encrypt(
            &(plainText[0]) + (1 * 16), &(output_buffer[0]) + (1 * 16), 16);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encrypt(
            &(plainText[0]) + (2 * 16), &(output_buffer[0]) + (2 * 16), 16);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encrypt(
            &(plainText[0]) + (3 * 16), &(output_buffer[0]) + (3 * 16), 16);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encrypt(
            &(plainText[0]) + (4 * 16), &(output_buffer[0]) + (4 * 16), 16);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encryptSegment(
            &(plainText[0]) + (6 * 16), &(output_buffer[0]) + (6 * 16), 16, 6);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encrypt(
            &(plainText[0]) + (7 * 16), &(output_buffer[0]) + (7 * 16), 16);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encrypt(
            &(plainText[0]) + (8 * 16), &(output_buffer[0]) + (8 * 16), 16);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encrypt(
            &(plainText[0]) + (9 * 16), &(output_buffer[0]) + (9 * 16), 16);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        err = xts->encryptSegment(&(plainText[0]) + (11 * 16),
                                  &(output_buffer[0]) + (11 * 16),
                                  203 - 176,
                                  11);

        EXPECT_EQ(err, ALC_ERROR_NONE);

#if 0
    auto ret = std::mismatch(
        cipherText.begin(), cipherText.end(), output_buffer.begin());
    std::cout << "First:" << ret.first - cipherText.begin()
              << "Second:" << ret.second - output_buffer.begin() << std::endl;
#endif
        delete alcpCipher;
        ASSERT_EQ(output_buffer, cipherText);
    }
}

TEST(XTS, encrypt_huge_multi_update_arbitrary)
{
#ifndef AES_MULTI_UPDATE
    GTEST_SKIP() << "Multi Update functionality unavailable!";
#endif
    Uint8 key[32] = { 0x85, 0xe8, 0xe2, 0x6d, 0x8f, 0x68, 0xcb, 0xd7,
                      0x90, 0x91, 0x26, 0x0c, 0x07, 0xc2, 0x1f, 0x30,
                      0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                      0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x61 };
    Uint8 iv[16]  = { 0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                     0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x60 };

    std::vector<Uint8> plainText = {
        0xf4, 0x2f, 0xa5, 0x55, 0xea, 0x94, 0x71, 0x0a, 0x20, 0xab, 0x16, 0x4b,
        0xe1, 0x9f, 0xca, 0x8b, 0x2a, 0x2d, 0x24, 0xc6, 0x9c, 0x74, 0xe2, 0xdf,
        0x08, 0xf5, 0xbb, 0x3a, 0x5c, 0x97, 0x11, 0xe9, 0x9c, 0xf3, 0x1f, 0x38,
        0x29, 0xbe, 0x85, 0xae, 0x1c, 0xfd, 0x6e, 0xa0, 0xaa, 0xbf, 0xb8, 0x16,
        0xba, 0x07, 0x6a, 0x91, 0xad, 0x38, 0x6e, 0x83, 0xfa, 0xa4, 0x7b, 0x44,
        0x36, 0x77, 0xb8, 0xc3, 0x0f, 0xb0, 0x3a, 0x89, 0xc6, 0x9f, 0x2d, 0x00,
        0x30, 0x06, 0x0a, 0xe8, 0x6b, 0x2f, 0x92, 0xa1, 0xb8, 0x80, 0xcd, 0x30,
        0x0f, 0x91, 0x40, 0xaf, 0x2e, 0x90, 0xe6, 0x2b, 0x38, 0x49, 0x85, 0x31,
        0xa0, 0x29, 0x46, 0xc5, 0x8a, 0x0c, 0x64, 0xfb, 0x53, 0x99, 0xea, 0xfb,
        0xb8, 0x3d, 0x9e, 0x2f, 0xf7, 0x08, 0x4f, 0x9c, 0xf5, 0x5a, 0xdc, 0x95,
        0x38, 0x82, 0xb1, 0x7d, 0x59, 0xe7, 0x4b, 0xac, 0xe0, 0x6a, 0x95, 0x25,
        0xd5, 0xce, 0x09, 0xac, 0x6e, 0xca, 0xe1, 0xa9, 0x6f, 0x4f, 0x06, 0xef,
        0x3f, 0x2e, 0xa9, 0x96, 0xfd, 0xba, 0x0c, 0x2b, 0xd8, 0x29, 0x06, 0xdc,
        0x19, 0x7b, 0x32, 0xdf, 0xf9, 0x7a, 0xe3, 0xc5, 0x9c, 0x93, 0xa1, 0x73,
        0x97, 0x25, 0xc9, 0x2b, 0x5e, 0x25, 0xfd, 0xc2, 0x3e, 0x9f, 0xa9, 0x8a,
        0x98, 0xf0, 0xa5, 0x1b, 0x85, 0xb2, 0x4c, 0x6b, 0xe3, 0x47, 0x3f, 0x97,
        0xf7, 0x60, 0x41, 0x47, 0x4b, 0x56, 0xf2, 0x52, 0xe6, 0xfd, 0x9f
    }; // 203 bytes

    std::vector<Uint8> cipherText = {
        0x69, 0xd2, 0xf0, 0xa7, 0x32, 0x61, 0x95, 0x80, 0x09, 0x50, 0x57, 0xdc,
        0x60, 0xa0, 0x66, 0xdb, 0x17, 0x68, 0x8e, 0x14, 0x26, 0xc8, 0x7a, 0x07,
        0xc7, 0xea, 0xc8, 0x5b, 0x58, 0x3b, 0xc5, 0x16, 0x51, 0x9a, 0x69, 0x49,
        0x6a, 0x65, 0x09, 0xa9, 0xb7, 0xa6, 0x06, 0x2d, 0x85, 0xba, 0xd3, 0xf4,
        0x0c, 0x39, 0x55, 0x0c, 0x0c, 0x64, 0xf8, 0x25, 0xa6, 0xab, 0xe6, 0x51,
        0x57, 0x44, 0xd9, 0x9e, 0x48, 0x03, 0x0d, 0xd4, 0x1e, 0x97, 0xf9, 0x0c,
        0xa0, 0x97, 0x3d, 0x9f, 0x2e, 0x32, 0x65, 0xee, 0x75, 0xea, 0xb6, 0xc6,
        0x18, 0x09, 0x67, 0xb4, 0x8a, 0xcb, 0x54, 0xd2, 0x03, 0xdc, 0x0b, 0x5a,
        0xc1, 0x9e, 0xf5, 0x2f, 0xf3, 0xb7, 0x76, 0x2c, 0xe0, 0xaf, 0x8d, 0x4e,
        0x03, 0xa5, 0x85, 0x3f, 0xa7, 0x54, 0x29, 0x7f, 0xb2, 0x7e, 0x65, 0xe9,
        0xca, 0x83, 0x2d, 0x5f, 0x7e, 0x95, 0xa3, 0x69, 0x2f, 0xe9, 0xb1, 0x83,
        0xee, 0x5e, 0x87, 0xad, 0x9c, 0x03, 0x36, 0x4c, 0x52, 0x28, 0x60, 0xc9,
        0xb9, 0x14, 0xb9, 0xdf, 0x1a, 0x02, 0xe4, 0x4f, 0x09, 0xa2, 0x75, 0x53,
        0xdc, 0xa6, 0xc2, 0xdc, 0x0c, 0x4c, 0x26, 0xec, 0x0c, 0x07, 0xa4, 0x68,
        0x62, 0x6d, 0xf1, 0x15, 0x58, 0xaa, 0x14, 0xd2, 0x8e, 0x1f, 0x68, 0xe5,
        0x18, 0x28, 0x14, 0xff, 0xba, 0x52, 0x2f, 0x32, 0x22, 0x91, 0x81, 0x53,
        0x4e, 0x28, 0x0e, 0x2b, 0x11, 0x04, 0x8e, 0xe4, 0xab, 0x6e, 0xe1
    };
    alc_error_t err = ALC_ERROR_NONE;

    std::vector<Uint8> output_buffer(plainText.size(), 0xff);

    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();

    for (CpuCipherFeatures feature : cpu_features) {
#ifdef DEBUG
        std::cout
            << "Cpu Feature:"
            << static_cast<
                   typename std::underlying_type<CpuCipherFeatures>::type>(
                   feature)
            << std::endl;
#endif
        auto alcpCipher = new CipherFactory<iCipherSeg>;
        auto xts        = alcpCipher->create("aes-xts-128", feature);

        if (xts == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        err = xts->init(key, 128, iv, 16);

        Uint64 res = plainText.size() % 16;
        if (plainText.size() >= (16 + res)) {
            Uint64 extra_update_size = 0;
            Uint64 multi_update_size = 0;
            Uint8* curr_pt           = &(plainText[0]); // 0x00
            Uint8* curr_ot           = &(output_buffer[0]);
            if (res) {
                // If partial bock, give 2 blocks at a time.
                multi_update_size = plainText.size() - 16 - res;
                extra_update_size = 16 + res;
            } else {
                multi_update_size = plainText.size();
            }
            curr_pt += multi_update_size - 0x10; // 0x00 + 0x60 -> 0x50 -> 0x5f
            curr_ot += multi_update_size - 0x10;
            int blocks     = multi_update_size / 16;
            int curr_block = blocks - 1;
            while (curr_block >= 0) {
                err = xts->encryptSegment(curr_pt, curr_ot, 16, curr_block);

                EXPECT_EQ(err, ALC_ERROR_NONE);
                curr_ot -= 16;
                curr_pt -= 16;
                curr_block--;
            }
            curr_pt = &(plainText[0]) + multi_update_size;
            curr_ot = &(output_buffer[0]) + multi_update_size;
            // Last 2 blocks if available
            if (extra_update_size) {
                err = xts->encryptSegment(
                    curr_pt, curr_ot, extra_update_size, blocks);

                EXPECT_EQ(err, ALC_ERROR_NONE);
            }
        }

#if 0
    auto ret = std::mismatch(
        cipherText.begin(), cipherText.end(), output_buffer.begin());
    std::cout << "First:" << ret.first - cipherText.begin()
              << "Second:" << ret.second - output_buffer.begin() << std::endl;
#endif
        delete alcpCipher;
        ASSERT_EQ(output_buffer, cipherText);
    }
}

TEST(XTS, decrypt_huge_multi_update)
{
#ifndef AES_MULTI_UPDATE
    GTEST_SKIP() << "Multi Update functionality unavailable!";
#endif
    Uint8 key[32] = { 0x85, 0xe8, 0xe2, 0x6d, 0x8f, 0x68, 0xcb, 0xd7,
                      0x90, 0x91, 0x26, 0x0c, 0x07, 0xc2, 0x1f, 0x30,
                      0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                      0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x61 };
    Uint8 iv[16]  = { 0x2c, 0x8a, 0xd6, 0xab, 0x91, 0x0d, 0x43, 0x68,
                     0xd7, 0x81, 0xb7, 0x52, 0x4b, 0x45, 0x8c, 0x60 };

    std::vector<Uint8> plainText = {
        0xf4, 0x2f, 0xa5, 0x55, 0xea, 0x94, 0x71, 0x0a, 0x20, 0xab, 0x16, 0x4b,
        0xe1, 0x9f, 0xca, 0x8b, 0x2a, 0x2d, 0x24, 0xc6, 0x9c, 0x74, 0xe2, 0xdf,
        0x08, 0xf5, 0xbb, 0x3a, 0x5c, 0x97, 0x11, 0xe9, 0x9c, 0xf3, 0x1f, 0x38,
        0x29, 0xbe, 0x85, 0xae, 0x1c, 0xfd, 0x6e, 0xa0, 0xaa, 0xbf, 0xb8, 0x16,
        0xba, 0x07, 0x6a, 0x91, 0xad, 0x38, 0x6e, 0x83, 0xfa, 0xa4, 0x7b, 0x44,
        0x36, 0x77, 0xb8, 0xc3, 0x0f, 0xb0, 0x3a, 0x89, 0xc6, 0x9f, 0x2d, 0x00,
        0x30, 0x06, 0x0a, 0xe8, 0x6b, 0x2f, 0x92, 0xa1, 0xb8, 0x80, 0xcd, 0x30,
        0x0f, 0x91, 0x40, 0xaf, 0x2e, 0x90, 0xe6, 0x2b, 0x38, 0x49, 0x85, 0x31,
        0xa0, 0x29, 0x46, 0xc5, 0x8a, 0x0c, 0x64, 0xfb, 0x53, 0x99, 0xea, 0xfb,
        0xb8, 0x3d, 0x9e, 0x2f, 0xf7, 0x08, 0x4f, 0x9c, 0xf5, 0x5a, 0xdc, 0x95,
        0x38, 0x82, 0xb1, 0x7d, 0x59, 0xe7, 0x4b, 0xac, 0xe0, 0x6a, 0x95, 0x25,
        0xd5, 0xce, 0x09, 0xac, 0x6e, 0xca, 0xe1, 0xa9, 0x6f, 0x4f, 0x06, 0xef,
        0x3f, 0x2e, 0xa9, 0x96, 0xfd, 0xba, 0x0c, 0x2b, 0xd8, 0x29, 0x06, 0xdc,
        0x19, 0x7b, 0x32, 0xdf, 0xf9, 0x7a, 0xe3, 0xc5, 0x9c, 0x93, 0xa1, 0x73,
        0x97, 0x25, 0xc9, 0x2b, 0x5e, 0x25, 0xfd, 0xc2, 0x3e, 0x9f, 0xa9, 0x8a,
        0x98, 0xf0, 0xa5, 0x1b, 0x85, 0xb2, 0x4c, 0x6b, 0xe3, 0x47, 0x3f, 0x97,
        0xf7, 0x60, 0x41, 0x47, 0x4b, 0x56, 0xf2, 0x52, 0xe6, 0xfd, 0x9f
    };

    std::vector<Uint8> cipherText = {
        0x69, 0xd2, 0xf0, 0xa7, 0x32, 0x61, 0x95, 0x80, 0x09, 0x50, 0x57, 0xdc,
        0x60, 0xa0, 0x66, 0xdb, 0x17, 0x68, 0x8e, 0x14, 0x26, 0xc8, 0x7a, 0x07,
        0xc7, 0xea, 0xc8, 0x5b, 0x58, 0x3b, 0xc5, 0x16, 0x51, 0x9a, 0x69, 0x49,
        0x6a, 0x65, 0x09, 0xa9, 0xb7, 0xa6, 0x06, 0x2d, 0x85, 0xba, 0xd3, 0xf4,
        0x0c, 0x39, 0x55, 0x0c, 0x0c, 0x64, 0xf8, 0x25, 0xa6, 0xab, 0xe6, 0x51,
        0x57, 0x44, 0xd9, 0x9e, 0x48, 0x03, 0x0d, 0xd4, 0x1e, 0x97, 0xf9, 0x0c,
        0xa0, 0x97, 0x3d, 0x9f, 0x2e, 0x32, 0x65, 0xee, 0x75, 0xea, 0xb6, 0xc6,
        0x18, 0x09, 0x67, 0xb4, 0x8a, 0xcb, 0x54, 0xd2, 0x03, 0xdc, 0x0b, 0x5a,
        0xc1, 0x9e, 0xf5, 0x2f, 0xf3, 0xb7, 0x76, 0x2c, 0xe0, 0xaf, 0x8d, 0x4e,
        0x03, 0xa5, 0x85, 0x3f, 0xa7, 0x54, 0x29, 0x7f, 0xb2, 0x7e, 0x65, 0xe9,
        0xca, 0x83, 0x2d, 0x5f, 0x7e, 0x95, 0xa3, 0x69, 0x2f, 0xe9, 0xb1, 0x83,
        0xee, 0x5e, 0x87, 0xad, 0x9c, 0x03, 0x36, 0x4c, 0x52, 0x28, 0x60, 0xc9,
        0xb9, 0x14, 0xb9, 0xdf, 0x1a, 0x02, 0xe4, 0x4f, 0x09, 0xa2, 0x75, 0x53,
        0xdc, 0xa6, 0xc2, 0xdc, 0x0c, 0x4c, 0x26, 0xec, 0x0c, 0x07, 0xa4, 0x68,
        0x62, 0x6d, 0xf1, 0x15, 0x58, 0xaa, 0x14, 0xd2, 0x8e, 0x1f, 0x68, 0xe5,
        0x18, 0x28, 0x14, 0xff, 0xba, 0x52, 0x2f, 0x32, 0x22, 0x91, 0x81, 0x53,
        0x4e, 0x28, 0x0e, 0x2b, 0x11, 0x04, 0x8e, 0xe4, 0xab, 0x6e, 0xe1
    };
    alc_error_t err = ALC_ERROR_NONE;

    std::vector<Uint8> output_buffer(cipherText.size(), 0xff);

    std::vector<CpuCipherFeatures> cpu_features = getSupportedFeatures();
    for (CpuCipherFeatures feature : cpu_features) {
        auto alcpCipher = new CipherFactory<iCipherSeg>;
        auto xts        = alcpCipher->create("aes-xts-128", feature);

        if (xts == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        err = xts->init(key, 128, iv, 16);

        Uint64 res = cipherText.size() % 16;
        if (cipherText.size() >= (16 + res)) {
            Uint64 extra_update_size = 0;
            Uint64 multi_update_size = 0;
            Uint8* curr_ct           = &(cipherText[0]);
            Uint8* curr_ot           = &(output_buffer[0]);
            if (res) {
                // If partial bock, give 2 blocks at a time.
                multi_update_size = cipherText.size() - 16 - res;
                extra_update_size = 16 + res;
            } else {
                multi_update_size = cipherText.size();
            }
            while (multi_update_size > 0) {
                err = xts->decrypt(curr_ct, curr_ot, 16);

                EXPECT_FALSE(alcp_is_error(err));
                multi_update_size -= 16;
                curr_ot += 16;
                curr_ct += 16;
            }
            // Last 2 blocks if available
            if (extra_update_size) {
                err = xts->decrypt(curr_ct, curr_ot, extra_update_size);

                EXPECT_FALSE(alcp_is_error(err));
            }
        }
        delete alcpCipher;
        ASSERT_EQ(output_buffer, plainText);
    }
}

// FIXME: Need to bring back this testing
#if 1

using namespace alcp::cipher;
/**
 * @brief Key Size to Mode string
 *
 * @param keySize Key size in Bytes
 * @return std::string, mode
 */
std::string
keyToModStr(Uint64 keySize)
{
    std::string mode_str = "";
    switch (keySize) {
        case 16:
            mode_str = "aes-xts-128";
            break;
        case 32:
            mode_str = "aes-xts-256";
            break;
        default:
            mode_str = "aes-xts-128";
            std::cout
                << "Mode string defaulting to 'aes-xts-128', invalid keysize"
                << std::endl;
    }
    return mode_str;
}

class XTS_KAT
    : public testing::TestWithParam<std::pair<const std::string, param_tuple>>
{
  public:
    CipherFactory<iCipher>* alcpCipher = nullptr;
    iCipher*                pXtsObj    = nullptr;
    std::vector<Uint8> m_key, m_tweak, _key, m_iv, m_plaintext, m_ciphertext;
    Uint64             m_key_size = 0;
    std::string        m_test_name;
    alc_error_t        m_err;
    // Setup Test for Encrypt/Decrypt
    void SetUp() override
    {
        // Tuple order
        // {key,nonce,aad,plain,ciphertext,tag}
        const auto params                                      = GetParam();
        const auto [key, tweak_key, iv, plaintext, ciphertext] = params.second;
        const auto test_name                                   = params.first;

        // Copy Values to class variables
        m_key        = key;
        m_key_size   = key.size();
        m_tweak      = tweak_key;
        m_iv         = iv;
        m_plaintext  = plaintext;
        m_ciphertext = ciphertext;
        m_test_name  = test_name;

        // Insert Tweak Key into key
        m_key.insert(m_key.end(), m_tweak.begin(), m_tweak.end());

        // As m_key has both keys, the key size is double, hence /2
        // Setup XTS Object
        alcpCipher = new CipherFactory<iCipher>;
        pXtsObj    = alcpCipher->create(keyToModStr(m_key_size));

        ASSERT_TRUE(pXtsObj != nullptr);
    }
    void TearDown() override { delete alcpCipher; }
};

INSTANTIATE_TEST_SUITE_P(
    KnownAnswerTest,
    XTS_KAT,
    testing::ValuesIn(KATDataset),
    [](const testing::TestParamInfo<XTS_KAT::ParamType>& info) {
        return info.param.first;
    });

TEST_P(XTS_KAT, valid_encrypt_request)
{
    std::vector<Uint8> out(m_ciphertext.size());

    pXtsObj->init(m_key.data(), m_key_size * 8, m_iv.data(), m_iv.size());

    alc_error_t err = pXtsObj->encrypt(
        &(m_plaintext.at(0)), &(out.at(0)), m_plaintext.size());

    EXPECT_EQ(err, ALC_ERROR_NONE);
    EXPECT_EQ(out, m_ciphertext);
}

TEST_P(XTS_KAT, valid_decrypt_request)
{
    pXtsObj->init(m_key.data(), m_key_size * 8, m_iv.data(), m_iv.size());

    std::vector<Uint8> out(m_plaintext.size());

    pXtsObj->init(m_key.data(), m_key_size * 8, m_iv.data(), m_iv.size());

    alc_error_t err = pXtsObj->decrypt(
        &(m_ciphertext.at(0)), &(out.at(0)), m_plaintext.size());

    EXPECT_EQ(err, ALC_ERROR_NONE);
    EXPECT_EQ(out, m_plaintext);
}

TEST_P(XTS_KAT, valid_encrypt_decrypt_test)
{
    pXtsObj->init(m_key.data(), m_key_size * 8, m_iv.data(), m_iv.size());
    std::vector<Uint8> outct(m_ciphertext.size()), outpt(m_plaintext.size());

    alc_error_t err = pXtsObj->encrypt(
        &(m_plaintext.at(0)), &(outct.at(0)), m_plaintext.size());

    pXtsObj->init(m_key.data(), m_key_size * 8, m_iv.data(), m_iv.size());

    err = pXtsObj->decrypt(&(outct.at(0)), &(outpt.at(0)), m_plaintext.size());

    EXPECT_TRUE(err == ALC_ERROR_NONE);
    EXPECT_EQ(m_plaintext, outpt);
}
#endif