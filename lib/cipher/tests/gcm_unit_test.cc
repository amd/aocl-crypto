/*
 * Copyright (C) 2022-2025, Advanced Micro Devices. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include "alcp/cipher/aes.hh"
#include "alcp/cipher/aes_gcm.hh"

#include "gtest/gtest.h"
#include <math.h>
// Linux Specific Header Files
#if __linux__
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/types.h>
#endif

using namespace alcp::cipher;

// KAT Data
// clang-format off
typedef std::tuple<std::vector<Uint8>, // key
                   std::vector<Uint8>, // nonce
                   std::vector<Uint8>, // aad
                   std::vector<Uint8>, // plaintext
                   std::vector<Uint8>, // ciphertext
                   std::vector<Uint8> // tag
                  >
            param_tuple;
typedef std::map<const std::string, param_tuple> known_answer_map_t;

/* Example Encodings
P_K128b_N7B_A0B_P0B_C0B_T4B
P     -> Pass, F -> Fail
K128b -> Key 128 bit
N7B   -> Nonce 7 byte
A0B   -> Additional Data 0 byte
P0B   -> PlainText 0 byte
C0B   -> CipherText 0 byte
T4B   -> Tag 4 byte

Tuple order
{key,nonce,aad,plain,ciphertext,tag}
*/
known_answer_map_t KATDataset{
    {
      "P_K128b_N12B_A0B_P0B_C0B_T16B",
      {
        {0x11,0x75,0x4c,0xd7,0x2a,0xec,0x30,0x9b,0xf5,0x2f,0x76,0x87,0x21,0x2e,0x89,0x57},
        {0x3c,0x81,0x9d,0x9a,0x9b,0xed,0x08,0x76,0x15,0x03,0x0b,0x65},
        {},
        {},
        {},
        {0x25,0x03,0x27,0xc6,0x74,0xaa,0xf4,0x77,0xae,0xf2,0x67,0x57,0x48,0xcf,0x69,0x71},
      }
    },
    {
      "P_K128b_N12B_A0B_P0B_C0B_T15B",
      {
        {0x27,0x2f,0x16,0xed,0xb8,0x1a,0x7a,0xbb,0xea,0x88,0x73,0x57,0xa5,0x8c,0x19,0x17},
        {0x79,0x4e,0xc5,0x88,0x17,0x6c,0x70,0x3d,0x3d,0x2a,0x7a,0x07},
        {},
        {},
        {},
        {0xb6,0xe6,0xf1,0x97,0x16,0x8f,0x50,0x49,0xae,0xda,0x32,0xda,0xfb,0xda,0xeb},
      }
    },
    {
      "P_K128b_N12B_A0B_P0B_C0B_T14B",
      {
        {0x81,0xb6,0x84,0x4a,0xab,0x6a,0x56,0x8c,0x45,0x56,0xa2,0xeb,0x7e,0xae,0x75,0x2f},
        {0xce,0x60,0x0f,0x59,0x61,0x83,0x15,0xa6,0x82,0x9b,0xef,0x4d},
        {},
        {},
        {},
        {0x89,0xb4,0x3e,0x9d,0xbc,0x1b,0x4f,0x59,0x7d,0xbb,0xc7,0x65,0x5b,0xb5},
      }
    },
    {
      "P_K128b_N1B_A0B_P16B_C16B_T14B",
      {
        {0x4f,0x1d,0xc3,0xda,0xe8,0x3a,0x38,0x90,0xdb,0xa8,0xf8,0x24,0x1d,0x28,0xb0,0xb2},
        {0x1a},
        {},
        {0x05,0x94,0xee,0x26,0x78,0x14,0xdb,0x70,0x24,0x0c,0x77,0xfc,0x53,0x0e,0x19,0x4d},
        {0xad,0x84,0xfb,0xb4,0x26,0x14,0x33,0xd4,0x90,0x19,0x1d,0xec,0x75,0x1d,0x9e,0x0e},
        {0x4f,0x49,0x53,0x00,0xf8,0xb0,0xeb,0x15,0x96,0xad,0xfb,0xd3,0x71,0xb0},
      }
    },
    {
      "P_K128b_N1B_A20B_P16B_C16B_T13B",
      {
        {0xe7,0xc1,0x31,0xc0,0x8f,0x41,0x75,0xea,0xbe,0x9e,0x8f,0x88,0xf7,0x79,0x8b,0x4c},
        {0xad},
        {0xf7,0x63,0x4f,0x67,0x1a,0x45,0x00,0xa4,0xc6,0xf7,0xec,0x8c,0x70,0xcb,0xe2,0x17,0x0c,0x17,0x21,0xfc},
        {0x54,0xf7,0xe0,0x47,0x0c,0xc3,0x35,0xe7,0x63,0x14,0x15,0x8a,0x97,0x14,0xa9,0x1c},
        {0x84,0x50,0x6e,0xa8,0xf1,0x4c,0x23,0x94,0x46,0x56,0x82,0x76,0xc0,0x21,0x44,0xa3},
        {0xcf,0x21,0x72,0x47,0xec,0x7a,0x7e,0x4e,0x78,0x10,0x97,0x25,0x9e},
      }
    },
    {
      "P_K128b_N1B_A20B_P16B_C16B_T13B",
      {
        {0x37,0x79,0x34,0x37,0xbd,0x77,0x55,0x86,0x10,0xec,0x25,0x60,0x12,0x92,0x65,0xb3},
        {0x30},
        {0x7c,0x15,0x90,0x3e,0xb9,0xd3,0xec,0x08,0x65,0x49,0xb7,0x9e,0xed,0x5f,0x66,0x0c,0x27,0xf1,0x68,0xd0},
        {0x2c,0x03,0x4d,0x88,0x73,0xdb,0x84,0xfa,0x94,0x44,0x8e,0x6a,0x45,0xe9,0x90,0x63},
        {0x68,0x8d,0xda,0x49,0x85,0x7d,0x02,0xbc,0x34,0xd4,0xe4,0x99,0xa4,0xc2,0xc3,0x7d},
        {0xee,0xc4,0x02,0xd5,0x90,0x47,0x39,0x66,0x1b,0x20,0xcb,0x9d,0x92},
      }
    },
    {
      "P_K128b_N12B_A16B_P16B_C16B_T16B",
      {
        {0xc9,0x39,0xcc,0x13,0x39,0x7c,0x1d,0x37,0xde,0x6a,0xe0,0xe1,0xcb,0x7c,0x42,0x3c},
        {0xb3,0xd8,0xcc,0x01,0x7c,0xbb,0x89,0xb3,0x9e,0x0f,0x67,0xe2},
        {0x24,0x82,0x56,0x02,0xbd,0x12,0xa9,0x84,0xe0,0x09,0x2d,0x3e,0x44,0x8e,0xda,0x5f},
        {0xc3,0xb3,0xc4,0x1f,0x11,0x3a,0x31,0xb7,0x3d,0x9a,0x5c,0xd4,0x32,0x10,0x30,0x69},
        {0x93,0xfe,0x7d,0x9e,0x9b,0xfd,0x10,0x34,0x8a,0x56,0x06,0xe5,0xca,0xfa,0x73,0x54},
        {0x00,0x32,0xa1,0xdc,0x85,0xf1,0xc9,0x78,0x69,0x25,0xa2,0xe7,0x1d,0x82,0x72,0xdd},
      }
    },
    {
      "P_K128b_N128B_A20B_P51B_C51B_T16B",
      {
        {0xc1,0x15,0xa6,0x49,0xeb,0x2a,0x50,0x2f,0xce,0x0a,0x7f,0x55,0x1d,0x02,0x00,0xb7},
        {0x89,0x62,0xe4,0xfe,0xc5,0xf0,0x32,0x13,0x84,0xba,0x4e,0x23,0xcc,0xa3,0x5a,0x04,0x5b,0xa2,0xe6,0x9c,0x11,0x64,0x0f,0xbd,0x0a,0xd6,0x99,0xa1,0xfc,0xa5,0x22,0xbd,0xb8,0xb8,0x14,0x95,0xd2,0xa1,0xf5,0x7f,0xbf,0x9c,0x52,0x0c,0xd3,0xec,0x9a,0xeb,0xf3,0xe4,0x3b,0x02,0xd9,0x78,0x4a,0x53,0x2a,0x97,0xfa,0xa6,0xd0,0xed,0x17,0xa1,0xb9,0x09,0x6e,0xe0,0x47,0xf0,0xea,0xe5,0x04,0x14,0x96,0x6b,0x8c,0xd6,0x07,0x12,0x36,0xd7,0x05,0x9a,0x34,0xc8,0xdd,0x1d,0x9b,0xa8,0xac,0x73,0xd5,0xd9,0x30,0x40,0xef,0x6a,0xe6,0x4f,0xa9,0xf5,0x78,0x6d,0x4b,0xa7,0x18,0x9b,0x1b,0xa8,0x9d,0x74,0xae,0xaf,0x5e,0x65,0x60,0x0f,0x06,0xc5,0xd9,0xfc,0xf7,0xc6,0xe3,0xd7,0x6e,0xc9},
        {0x2a,0xb2,0x86,0x75,0x68,0x24,0xc7,0xc2,0xd5,0x3f,0x98,0xef,0x70,0x75,0xfa,0xe4,0x18,0x1b,0xf7,0x41},
        {0x09,0x62,0xe1,0x3f,0x76,0xe2,0x81,0x94,0x2a,0xec,0x8c,0x9d,0x7b,0xf5,0x9c,0xca,0xf7,0x02,0xde,0xa4,0x9d,0xe4,0x84,0x28,0x0e,0x4c,0xc0,0x7b,0xf4,0x43,0x55,0x62,0x4d,0x26,0x2e,0x5b,0x42,0xee,0xff,0x46,0xa0,0x6e,0xb7,0x98,0xc0,0xdc,0xd7,0x48,0xaa,0xeb,0x66},
        {0x8f,0xe5,0x9a,0xa7,0xc1,0x12,0xe4,0xb5,0x00,0x0f,0xd8,0x2f,0x19,0x4f,0x0f,0x9b,0x15,0x21,0x8f,0x07,0x26,0x30,0xdf,0x58,0x70,0xd1,0xc8,0xca,0x81,0xd7,0xd6,0x6c,0xcf,0x95,0xdd,0xd3,0xab,0x3c,0x60,0x3a,0xf2,0xfc,0x2b,0xb9,0xed,0xca,0x00,0xc7,0xbd,0xab,0x94},
        {0x9e,0xab,0x1e,0x03,0x7e,0x70,0x3a,0x77,0x7b,0x76,0x30,0x6d,0x8a,0xa6,0x60,0xd3},
      }
    },
    {
      "P_K128b_N19B_A32B_P48B_C48B_T16B_CROSS",
      {
        {0xfe,0xc7,0x2f,0xee,0x8f,0xc3,0x88,0x33,0xe0,0xdb,0x47,0xd2,0x0d,0x69,0x22,0x36},
        {0x39,0x8c,0x22,0x07,0x78,0xa3,0x13,0xa0,0x0c,0x35,0x6e,0x65,0x31,0x99,0x74,0x82,0x2c,0x7e,0x17},
        {0x23,0xfb,0x6b,0xe4,0x66,0x0f,0x61,0x18,0xce,0xd9,0xa2,0xae,0xfd,0x11,0x73,0xe7,0x59,0x19,0x3e,0x4d,0x50,0x3d,0x98,0xa2,0x16,0x6d,0xd0,0xf3,0xeb,0x69,0x51,0x1f},
        {0xee,0xd2,0xfe,0xe8,0xf9,0xbe,0x1d,0x5a,0x55,0xee,0x4c,0x28,0x61,0xb9,0x31,0x42,0x58,0x2a,0x67,0xdd,0xef,0x39,0x7b,0xff,0xa6,0xfa,0x38,0x1c,0xa3,0x4c,0x93,0xd5,0xb4,0xa1,0xbd,0x07,0xb5,0xee,0xbf,0x30,0xc0,0x0f,0xb0,0xa3,0xb5,0x87,0x9d,0x85},
        {0xb6,0xdd,0x7e,0xbb,0xeb,0x56,0x83,0x43,0x17,0xf2,0xac,0x1c,0xf0,0xdc,0x69,0xb3,0xb0,0x2a,0xb8,0x7e,0x7e,0x52,0x41,0x11,0x36,0x46,0x34,0x25,0xf4,0x00,0x1c,0xcd,0xe3,0x2a,0x36,0xf3,0x70,0xcf,0xe0,0xfc,0xe6,0xa0,0xac,0x37,0x6a,0xe1,0x3a,0xe2},
        {0x77,0xf6,0xc4,0x7b,0x05,0x40,0xf0,0xb9,0xff,0x3c,0x3b,0x07,0xa2,0x4c,0x62,0xfe},
      }
    },
};
// clang-format on

/**
 * @brief Key Size to Mode string
 *
 * @param keySize Key size in Bytes
 * @return std::string, mode
 */
std::string
keyToModStr(Uint64 keySize)
{
    std::string mode_str = "";
    switch (keySize) {
        case 16:
            mode_str = "aes-gcm-128";
            break;
        case 24:
            mode_str = "aes-gcm-192";
            break;
        case 32:
            mode_str = "aes-gcm-256";
            break;
        default:
            mode_str = "aes-gcm-128";
            std::cout
                << "Mode string defaulting to 'aes-gcm-128', invalid keysize"
                << std::endl;
    }
    return mode_str;
}

template<typename T>
T*
getPtr(std::vector<T>& vect)
{
    if (vect.size() == 0) {
        return nullptr;
    } else {
        return &vect[0];
    }
}

template<typename T>
const T*
getPtr(const std::vector<T>& vect)
{
    if (vect.size() == 0) {
        return nullptr;
    } else {
        return &vect[0];
    }
}

class GCM_KAT
    : public testing::TestWithParam<std::pair<const std::string, param_tuple>>
{
  public:
    // GCM_KAT() {}
    CipherFactory<iCipherAead>* alcpCipher = nullptr;
    iCipherAead*                pGcmObj    = nullptr;
    std::vector<Uint8> m_key, m_nonce, m_aad, m_plaintext, m_ciphertext, m_tag;
    std::string        m_test_name;
    alc_error_t        m_err;

    // Setup Test for Encrypt/Decrypt
    void SetUp() override
    {

        // Tuple order
        // {key,nonce,aad,plain,ciphertext,tag}
        const auto& params = GetParam();
        const auto [key, nonce, aad, plaintext, ciphertext, tag] =
            params.second;
        const auto& test_name = params.first;

        // Copy Values to class variables
        m_key        = key;
        m_nonce      = nonce;
        m_aad        = aad;
        m_plaintext  = plaintext;
        m_ciphertext = ciphertext;
        m_tag        = tag;
        m_test_name  = test_name;

        /* Initialization */

        // Setup GCM Object
        alcpCipher = new CipherFactory<iCipherAead>;
        pGcmObj    = alcpCipher->create(keyToModStr(key.size()));

        ASSERT_TRUE(pGcmObj != nullptr);

        // Key
        m_err = pGcmObj->init(getPtr(key), key.size() * 8, nullptr, 0);
        EXPECT_EQ(m_err, ALC_ERROR_NONE);

        // Nonce
        m_err = pGcmObj->init(nullptr, 0, getPtr(m_nonce), m_nonce.size());
        EXPECT_EQ(m_err, ALC_ERROR_NONE);

        // Additional Data
        if (!m_aad.empty()) {
            m_err = pGcmObj->setAad(getPtr(m_aad), m_aad.size());
            EXPECT_EQ(m_err, ALC_ERROR_NONE);
        }
    }

    // Teardown Encrypt/Decrypt by verifying the Tag.
    void TearDown() override { delete alcpCipher; }
};

TEST(GCM, Instantiation)
{

    Uint8 key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };

    {
        auto        alcpCipher = new CipherFactory<iCipherAead>;
        auto        aead       = alcpCipher->create("aes-gcm-128");
        alc_error_t err        = ALC_ERROR_NONE;

        if (aead == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        aead->init(key, 128, nullptr, 0);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        delete alcpCipher;
    }

    {
        auto        alcpCipher = new CipherFactory<iCipherAead>;
        auto        aead       = alcpCipher->create("aes-gcm-192");
        alc_error_t err        = ALC_ERROR_NONE;

        if (aead == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        aead->init(key, 192, nullptr, 0);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        delete alcpCipher;
    }

    {
        auto        alcpCipher = new CipherFactory<iCipherAead>;
        auto        aead       = alcpCipher->create("aes-gcm-256");
        alc_error_t err        = ALC_ERROR_NONE;

        if (aead == nullptr) {
            delete alcpCipher;
            FAIL();
        }
        err = aead->init(key, 256, nullptr, 0);

        EXPECT_EQ(err, ALC_ERROR_NONE);

        delete alcpCipher;
    }
}

#if 0
// Linux specific test
#ifdef __linux__
TEST(GCM, InputOverload)
{
    Uint8 iv[]  = { 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05 };
    Uint8 key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    const alc_cipher_algo_info_t aesInfo  = { .ai_mode = ALC_AES_MODE_GCM,
                                             .ai_iv   = iv };
    alc_key_info_t               keyInfo  = { .len  = 256,
                                              .key  = key };
    Gcm                          pGcmObj  = Gcm(aesInfo, keyInfo);
    auto                         zero1_fd = open("/dev/zero", O_RDWR);
    auto                         zero2_fd = open("/dev/zero", O_RDWR);
    auto                         pread    = mmap(
        0, pow(2, 39), PROT_READ, MAP_ANONYMOUS | MAP_PRIVATE, zero1_fd, 0);
    auto pwrite =
        mmap(0, pow(2, 39), PROT_WRITE, MAP_FILE | MAP_SHARED, zero2_fd, 0);
    alc_error_t err = ALC_ERROR_NONE;
    err             = pGcmObj.setIv(iv, sizeof(iv));
    EXPECT_EQ(err, ALC_ERROR_NONE);
    printf("%p %p\n", pwrite, pread);
    err = pGcmObj.encrypt(
        (const Uint8*)pread, (Uint8*)pwrite, pow(2, 39) - 256 + 1, iv);
    EXPECT_EQ(err, ALC_ERROR_INVALID_SIZE);
}
#endif
#endif

#if 1
TEST_P(GCM_KAT, Encrypt)
{
    std::vector<Uint8> out_ciphertext(m_plaintext.size(), 0);

    // Encrypt the plaintext into ciphertext.
    if (!m_plaintext.empty()) {
        m_err = pGcmObj->encrypt(
            &(m_plaintext.at(0)), &(out_ciphertext.at(0)), m_plaintext.size());
        EXPECT_EQ(out_ciphertext, m_ciphertext);
    } else {
        // Call encrypt update with a valid memory if no plaintext
        Uint8 a;
        m_err = pGcmObj->encrypt(&a, &a, 0);
    }
    EXPECT_EQ(m_err, ALC_ERROR_NONE);

    // If there is tag, try to get the tag.
    std::vector<Uint8> out_tag(m_tag.size(), 0);
    if (!m_tag.empty()) {
        m_err = pGcmObj->getTag(&(out_tag.at(0)), m_tag.size());
        if (m_test_name.at(0) == 'P') {
            EXPECT_EQ(out_tag, m_tag);
        } else {
            EXPECT_NE(out_tag, m_tag);
        }
        EXPECT_EQ(m_err, ALC_ERROR_NONE);
    }
}
#endif

TEST_P(GCM_KAT, Decrypt)
{
    std::vector<Uint8> out_plaintext(m_ciphertext.size(), 0);

    // Decrypt the ciphertext into plaintext
    if (!m_ciphertext.empty()) {
        m_err = pGcmObj->decrypt(
            &(m_ciphertext.at(0)), &(out_plaintext.at(0)), m_ciphertext.size());
        EXPECT_EQ(out_plaintext, m_plaintext);
    } else {
        // Call decrypt update with a valid memory if no plaintext
        Uint8 a;
        m_err = pGcmObj->decrypt(&a, &a, 0);
    }
    EXPECT_EQ(m_err, ALC_ERROR_NONE);

    // If there is tag, try to get the tag.
    std::vector<Uint8> out_tag(m_tag.size(), 0);
    if (!m_tag.empty()) {
        m_err = pGcmObj->getTag(&(out_tag.at(0)), m_tag.size());
        if (m_test_name.at(0) == 'P') {
            EXPECT_EQ(out_tag, m_tag);
        } else {
            EXPECT_NE(out_tag, m_tag);
        }
        EXPECT_EQ(m_err, ALC_ERROR_NONE);
    }
}

INSTANTIATE_TEST_SUITE_P(
    KnownAnswerTest,
    GCM_KAT,
    testing::ValuesIn(KATDataset),
    [](const testing::TestParamInfo<GCM_KAT::ParamType>& tpInfo)
        -> const std::string { return tpInfo.param.first; });

TEST(GCM, InvalidTagLen)
{
    alc_error_t err   = ALC_ERROR_NONE;
    Uint8       iv[]  = { 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05 };
    Uint8       key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                          0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    Uint8       pt[]  = "Hello World!";
    Uint8       tag[17];
    Uint8       cipherText[sizeof(pt)];

    auto alcpCipher = new CipherFactory<iCipherAead>;
    auto aead       = alcpCipher->create("aes-gcm-128");

    if (aead == nullptr) {
        delete alcpCipher;
        FAIL();
    }
    err = aead->init(key, 128, iv, 7);
    EXPECT_EQ(err, ALC_ERROR_NONE);

    // Skipping Aad as its not mandatory

    err = aead->encrypt(pt, cipherText, sizeof(pt));
    EXPECT_EQ(err, ALC_ERROR_NONE);

    // TODO: Create a parametrized test
    err = aead->getTag(tag, 17);
    EXPECT_EQ(err, ALC_ERROR_INVALID_SIZE);

    delete alcpCipher;
}

TEST(GCM, EncryptUpdateSingle)
{
    alc_error_t        err   = ALC_ERROR_NONE;
    std::vector<Uint8> key   = { 0xfe, 0xc7, 0x2f, 0xee, 0x8f, 0xc3, 0x88, 0x33,
                                 0xe0, 0xdb, 0x47, 0xd2, 0x0d, 0x69, 0x22, 0x36 };
    std::vector<Uint8> nonce = { 0x39, 0x8c, 0x22, 0x07, 0x78, 0xa3, 0x13,
                                 0xa0, 0x0c, 0x35, 0x6e, 0x65, 0x31, 0x99,
                                 0x74, 0x82, 0x2c, 0x7e, 0x17 };
    std::vector<Uint8> aad   = { 0x23, 0xfb, 0x6b, 0xe4, 0x66, 0x0f, 0x61, 0x18,
                                 0xce, 0xd9, 0xa2, 0xae, 0xfd, 0x11, 0x73, 0xe7,
                                 0x59, 0x19, 0x3e, 0x4d, 0x50, 0x3d, 0x98, 0xa2,
                                 0x16, 0x6d, 0xd0, 0xf3, 0xeb, 0x69, 0x51, 0x1f };
    std::vector<Uint8> ptext = {
        0xee, 0xd2, 0xfe, 0xe8, 0xf9, 0xbe, 0x1d, 0x5a, 0x55, 0xee, 0x4c, 0x28,
        0x61, 0xb9, 0x31, 0x42, 0x58, 0x2a, 0x67, 0xdd, 0xef, 0x39, 0x7b, 0xff,
        0xa6, 0xfa, 0x38, 0x1c, 0xa3, 0x4c, 0x93, 0xd5, 0xb4, 0xa1, 0xbd, 0x07,
        0xb5, 0xee, 0xbf, 0x30, 0xc0, 0x0f, 0xb0, 0xa3, 0xb5, 0x87, 0x9d, 0x85
    };
    std::vector<Uint8> ctext = {
        0xb6, 0xdd, 0x7e, 0xbb, 0xeb, 0x56, 0x83, 0x43, 0x17, 0xf2, 0xac, 0x1c,
        0xf0, 0xdc, 0x69, 0xb3, 0xb0, 0x2a, 0xb8, 0x7e, 0x7e, 0x52, 0x41, 0x11,
        0x36, 0x46, 0x34, 0x25, 0xf4, 0x00, 0x1c, 0xcd, 0xe3, 0x2a, 0x36, 0xf3,
        0x70, 0xcf, 0xe0, 0xfc, 0xe6, 0xa0, 0xac, 0x37, 0x6a, 0xe1, 0x3a, 0xe2
    };
    std::vector<Uint8> tag = { 0x77, 0xf6, 0xc4, 0x7b, 0x05, 0x40, 0xf0, 0xb9,
                               0xff, 0x3c, 0x3b, 0x07, 0xa2, 0x4c, 0x62, 0xfe };

    std::vector<Uint8> out(48);
    std::vector<Uint8> tag_out(16);

    auto alcpCipher = new CipherFactory<iCipherAead>;
    auto aead       = alcpCipher->create("aes-gcm-128");

    if (aead == nullptr) {
        delete alcpCipher;
        FAIL();
    }
    err = aead->init(getPtr(key), 128, getPtr(nonce), nonce.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->setAad(getPtr(aad), aad.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->encrypt(getPtr(ptext), getPtr(out), ptext.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    EXPECT_EQ(out, ctext);

    err = aead->getTag(getPtr(tag_out), 16);

    EXPECT_EQ(tag_out, tag);

    delete alcpCipher;
}

TEST(GCM, EncryptUpdateMultiple)
{
    alc_error_t        err   = ALC_ERROR_NONE;
    std::vector<Uint8> key   = { 0xfe, 0xc7, 0x2f, 0xee, 0x8f, 0xc3, 0x88, 0x33,
                                 0xe0, 0xdb, 0x47, 0xd2, 0x0d, 0x69, 0x22, 0x36 };
    std::vector<Uint8> nonce = { 0x39, 0x8c, 0x22, 0x07, 0x78, 0xa3, 0x13,
                                 0xa0, 0x0c, 0x35, 0x6e, 0x65, 0x31, 0x99,
                                 0x74, 0x82, 0x2c, 0x7e, 0x17 };
    std::vector<Uint8> aad   = { 0x23, 0xfb, 0x6b, 0xe4, 0x66, 0x0f, 0x61, 0x18,
                                 0xce, 0xd9, 0xa2, 0xae, 0xfd, 0x11, 0x73, 0xe7,
                                 0x59, 0x19, 0x3e, 0x4d, 0x50, 0x3d, 0x98, 0xa2,
                                 0x16, 0x6d, 0xd0, 0xf3, 0xeb, 0x69, 0x51, 0x1f };
    std::vector<Uint8> ptext = {
        0xee, 0xd2, 0xfe, 0xe8, 0xf9, 0xbe, 0x1d, 0x5a, 0x55, 0xee, 0x4c, 0x28,
        0x61, 0xb9, 0x31, 0x42, 0x58, 0x2a, 0x67, 0xdd, 0xef, 0x39, 0x7b, 0xff,
        0xa6, 0xfa, 0x38, 0x1c, 0xa3, 0x4c, 0x93, 0xd5, 0xb4, 0xa1, 0xbd, 0x07,
        0xb5, 0xee, 0xbf, 0x30, 0xc0, 0x0f, 0xb0, 0xa3, 0xb5, 0x87, 0x9d, 0x85
    };
    std::vector<Uint8> ctext = {
        0xb6, 0xdd, 0x7e, 0xbb, 0xeb, 0x56, 0x83, 0x43, 0x17, 0xf2, 0xac, 0x1c,
        0xf0, 0xdc, 0x69, 0xb3, 0xb0, 0x2a, 0xb8, 0x7e, 0x7e, 0x52, 0x41, 0x11,
        0x36, 0x46, 0x34, 0x25, 0xf4, 0x00, 0x1c, 0xcd, 0xe3, 0x2a, 0x36, 0xf3,
        0x70, 0xcf, 0xe0, 0xfc, 0xe6, 0xa0, 0xac, 0x37, 0x6a, 0xe1, 0x3a, 0xe2
    };
    std::vector<Uint8> tag = { 0x77, 0xf6, 0xc4, 0x7b, 0x05, 0x40, 0xf0, 0xb9,
                               0xff, 0x3c, 0x3b, 0x07, 0xa2, 0x4c, 0x62, 0xfe };

    std::vector<Uint8> out(48);
    std::vector<Uint8> tag_out(16);

    auto alcpCipher = new CipherFactory<iCipherAead>;
    auto aead       = alcpCipher->create("aes-gcm-128");

    if (aead == nullptr) {
        delete alcpCipher;
        FAIL();
    }
    err = aead->init(getPtr(key), 128, getPtr(nonce), nonce.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->setAad(getPtr(aad), aad.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->encrypt(getPtr(ptext), getPtr(out), ptext.size() - 16);
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->encrypt(
        getPtr(ptext) + ptext.size() - 16, getPtr(out) + ptext.size() - 16, 16);

    EXPECT_EQ(out, ctext);

    err = aead->getTag(getPtr(tag_out), 16);

    EXPECT_EQ(tag_out, tag);

    delete alcpCipher;
}

TEST(GCM, DecryptUpdateSingle)
{
    alc_error_t        err   = ALC_ERROR_NONE;
    std::vector<Uint8> key   = { 0xfe, 0xc7, 0x2f, 0xee, 0x8f, 0xc3, 0x88, 0x33,
                                 0xe0, 0xdb, 0x47, 0xd2, 0x0d, 0x69, 0x22, 0x36 };
    std::vector<Uint8> nonce = { 0x39, 0x8c, 0x22, 0x07, 0x78, 0xa3, 0x13,
                                 0xa0, 0x0c, 0x35, 0x6e, 0x65, 0x31, 0x99,
                                 0x74, 0x82, 0x2c, 0x7e, 0x17 };
    std::vector<Uint8> aad   = { 0x23, 0xfb, 0x6b, 0xe4, 0x66, 0x0f, 0x61, 0x18,
                                 0xce, 0xd9, 0xa2, 0xae, 0xfd, 0x11, 0x73, 0xe7,
                                 0x59, 0x19, 0x3e, 0x4d, 0x50, 0x3d, 0x98, 0xa2,
                                 0x16, 0x6d, 0xd0, 0xf3, 0xeb, 0x69, 0x51, 0x1f };
    std::vector<Uint8> ptext = {
        0xee, 0xd2, 0xfe, 0xe8, 0xf9, 0xbe, 0x1d, 0x5a, 0x55, 0xee, 0x4c, 0x28,
        0x61, 0xb9, 0x31, 0x42, 0x58, 0x2a, 0x67, 0xdd, 0xef, 0x39, 0x7b, 0xff,
        0xa6, 0xfa, 0x38, 0x1c, 0xa3, 0x4c, 0x93, 0xd5, 0xb4, 0xa1, 0xbd, 0x07,
        0xb5, 0xee, 0xbf, 0x30, 0xc0, 0x0f, 0xb0, 0xa3, 0xb5, 0x87, 0x9d, 0x85
    };
    std::vector<Uint8> ctext = {
        0xb6, 0xdd, 0x7e, 0xbb, 0xeb, 0x56, 0x83, 0x43, 0x17, 0xf2, 0xac, 0x1c,
        0xf0, 0xdc, 0x69, 0xb3, 0xb0, 0x2a, 0xb8, 0x7e, 0x7e, 0x52, 0x41, 0x11,
        0x36, 0x46, 0x34, 0x25, 0xf4, 0x00, 0x1c, 0xcd, 0xe3, 0x2a, 0x36, 0xf3,
        0x70, 0xcf, 0xe0, 0xfc, 0xe6, 0xa0, 0xac, 0x37, 0x6a, 0xe1, 0x3a, 0xe2
    };
    std::vector<Uint8> tag = { 0x77, 0xf6, 0xc4, 0x7b, 0x05, 0x40, 0xf0, 0xb9,
                               0xff, 0x3c, 0x3b, 0x07, 0xa2, 0x4c, 0x62, 0xfe };

    std::vector<Uint8> out(48);
    std::vector<Uint8> tag_out(16);

    auto alcpCipher = new CipherFactory<iCipherAead>;
    auto aead       = alcpCipher->create("aes-gcm-128");

    if (aead == nullptr) {
        delete alcpCipher;
        FAIL();
    }
    err = aead->init(getPtr(key), 128, getPtr(nonce), nonce.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->setAad(getPtr(aad), aad.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->decrypt(&ctext[0], getPtr(out), ptext.size());

    EXPECT_EQ(out, ptext);

    err = aead->getTag(getPtr(tag_out), 16);

    EXPECT_EQ(tag_out, tag);

    delete alcpCipher;
}

TEST(GCM, DecryptUpdateMultiple)
{
    alc_error_t        err   = ALC_ERROR_NONE;
    std::vector<Uint8> key   = { 0xfe, 0xc7, 0x2f, 0xee, 0x8f, 0xc3, 0x88, 0x33,
                                 0xe0, 0xdb, 0x47, 0xd2, 0x0d, 0x69, 0x22, 0x36 };
    std::vector<Uint8> nonce = { 0x39, 0x8c, 0x22, 0x07, 0x78, 0xa3, 0x13,
                                 0xa0, 0x0c, 0x35, 0x6e, 0x65, 0x31, 0x99,
                                 0x74, 0x82, 0x2c, 0x7e, 0x17 };
    std::vector<Uint8> aad   = { 0x23, 0xfb, 0x6b, 0xe4, 0x66, 0x0f, 0x61, 0x18,
                                 0xce, 0xd9, 0xa2, 0xae, 0xfd, 0x11, 0x73, 0xe7,
                                 0x59, 0x19, 0x3e, 0x4d, 0x50, 0x3d, 0x98, 0xa2,
                                 0x16, 0x6d, 0xd0, 0xf3, 0xeb, 0x69, 0x51, 0x1f };
    std::vector<Uint8> ptext = {
        0xee, 0xd2, 0xfe, 0xe8, 0xf9, 0xbe, 0x1d, 0x5a, 0x55, 0xee, 0x4c, 0x28,
        0x61, 0xb9, 0x31, 0x42, 0x58, 0x2a, 0x67, 0xdd, 0xef, 0x39, 0x7b, 0xff,
        0xa6, 0xfa, 0x38, 0x1c, 0xa3, 0x4c, 0x93, 0xd5, 0xb4, 0xa1, 0xbd, 0x07,
        0xb5, 0xee, 0xbf, 0x30, 0xc0, 0x0f, 0xb0, 0xa3, 0xb5, 0x87, 0x9d, 0x85
    };
    std::vector<Uint8> ctext = {
        0xb6, 0xdd, 0x7e, 0xbb, 0xeb, 0x56, 0x83, 0x43, 0x17, 0xf2, 0xac, 0x1c,
        0xf0, 0xdc, 0x69, 0xb3, 0xb0, 0x2a, 0xb8, 0x7e, 0x7e, 0x52, 0x41, 0x11,
        0x36, 0x46, 0x34, 0x25, 0xf4, 0x00, 0x1c, 0xcd, 0xe3, 0x2a, 0x36, 0xf3,
        0x70, 0xcf, 0xe0, 0xfc, 0xe6, 0xa0, 0xac, 0x37, 0x6a, 0xe1, 0x3a, 0xe2
    };
    std::vector<Uint8> tag = { 0x77, 0xf6, 0xc4, 0x7b, 0x05, 0x40, 0xf0, 0xb9,
                               0xff, 0x3c, 0x3b, 0x07, 0xa2, 0x4c, 0x62, 0xfe };

    std::vector<Uint8> out(48);
    std::vector<Uint8> tag_out(16);

    auto alcpCipher = new CipherFactory<iCipherAead>;
    auto aead       = alcpCipher->create("aes-gcm-128");

    if (aead == nullptr) {
        delete alcpCipher;
        FAIL();
    }
    err = aead->init(getPtr(key), 128, getPtr(nonce), nonce.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->setAad(getPtr(aad), aad.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->decrypt(&ctext[0], getPtr(out), ctext.size() - 16);

    err = aead->decrypt(
        &ctext[0] + ctext.size() - 16, getPtr(out) + ctext.size() - 16, 16);

    EXPECT_EQ(out, ptext);

    err = aead->getTag(getPtr(tag_out), 16);

    EXPECT_EQ(tag_out, tag);

    delete alcpCipher;
}

// Unit Test to mimic test_quic_multistream openssl tests
#if 0
TEST(GCM, EncryptUpdateMultipleStream)
{
    alc_error_t        err   = ALC_ERROR_NONE;
    std::vector<Uint8> key   = { 0xfe, 0xc7, 0x2f, 0xee, 0x8f, 0xc3, 0x88, 0x33,
                                 0xe0, 0xdb, 0x47, 0xd2, 0x0d, 0x69, 0x22, 0x36 };
    std::vector<Uint8> nonce = { 0x39, 0x8c, 0x22, 0x07, 0x78, 0xa3, 0x13,
                                 0xa0, 0x0c, 0x35, 0x6e, 0x65, 0x31, 0x99,
                                 0x74, 0x82, 0x2c, 0x7e, 0x17 };
    std::vector<Uint8> aad   = { 0x23, 0xfb, 0x6b, 0xe4, 0x66, 0x0f, 0x61, 0x18,
                                 0xce, 0xd9, 0xa2, 0xae, 0xfd, 0x11, 0x73, 0xe7,
                                 0x59, 0x19, 0x3e, 0x4d, 0x50, 0x3d, 0x98, 0xa2,
                                 0x16, 0x6d, 0xd0, 0xf3, 0xeb, 0x69, 0x51, 0x1f };
    std::vector<Uint8> ptext = {
        0xee, 0xd2, 0xfe, 0xe8, 0xf9, 0xbe, 0x1d, 0x5a, 0x55, 0xee, 0x4c, 0x28,
        0x61, 0xb9, 0x31, 0x42, 0x58, 0x2a, 0x67, 0xdd, 0xef, 0x39, 0x7b, 0xff,
        0xa6, 0xfa, 0x38, 0x1c, 0xa3, 0x4c, 0x93, 0xd5, 0xb4, 0xa1, 0xbd, 0x07,
        0xb5, 0xee, 0xbf, 0x30, 0xc0, 0x0f, 0xb0, 0xa3, 0xb5, 0x87, 0x9d, 0x85
    };
    std::vector<Uint8> ctext = {
        0xb6, 0xdd, 0x7e, 0xbb, 0xeb, 0x56, 0x83, 0x43, 0x17, 0xf2, 0xac, 0x1c,
        0xf0, 0xdc, 0x69, 0xb3, 0xb0, 0x2a, 0xb8, 0x7e, 0x7e, 0x52, 0x41, 0x11,
        0x36, 0x46, 0x34, 0x25, 0xf4, 0x00, 0x1c, 0xcd, 0xe3, 0x2a, 0x36, 0xf3,
        0x70, 0xcf, 0xe0, 0xfc, 0xe6, 0xa0, 0xac, 0x37, 0x6a, 0xe1, 0x3a, 0xe2
    };
    std::vector<Uint8> tag = { 0x77, 0xf6, 0xc4, 0x7b, 0x05, 0x40, 0xf0, 0xb9,
                               0xff, 0x3c, 0x3b, 0x07, 0xa2, 0x4c, 0x62, 0xfe };

    std::vector<Uint8> out(48);
    std::vector<Uint8> tag_out(16);

    auto alcpCipher = new CipherFactory<iCipherAead>;
    auto aead       = alcpCipher->create("aes-gcm-128");

    if (aead == nullptr) {
        delete alcpCipher;
        FAIL();
    }
    err = aead->init(getPtr(key), 128, getPtr(nonce), nonce.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->setAad(getPtr(aad), aad.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->encrypt(getPtr(ptext), getPtr(out), 4);
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->encrypt(getPtr(ptext) + 4, getPtr(out) + 4, ptext.size() - 4);
    EXPECT_EQ(err, ALC_ERROR_NONE);

    EXPECT_EQ(out, ctext);

    err = aead->getTag(getPtr(tag_out), 16);

    EXPECT_EQ(tag_out, tag);

    delete alcpCipher;
}

TEST(GCM, DecryptUpdateMultipleStream)
{
    alc_error_t        err   = ALC_ERROR_NONE;
    std::vector<Uint8> key   = { 0xfe, 0xc7, 0x2f, 0xee, 0x8f, 0xc3, 0x88, 0x33,
                                 0xe0, 0xdb, 0x47, 0xd2, 0x0d, 0x69, 0x22, 0x36 };
    std::vector<Uint8> nonce = { 0x39, 0x8c, 0x22, 0x07, 0x78, 0xa3, 0x13,
                                 0xa0, 0x0c, 0x35, 0x6e, 0x65, 0x31, 0x99,
                                 0x74, 0x82, 0x2c, 0x7e, 0x17 };
    std::vector<Uint8> aad   = { 0x23, 0xfb, 0x6b, 0xe4, 0x66, 0x0f, 0x61, 0x18,
                                 0xce, 0xd9, 0xa2, 0xae, 0xfd, 0x11, 0x73, 0xe7,
                                 0x59, 0x19, 0x3e, 0x4d, 0x50, 0x3d, 0x98, 0xa2,
                                 0x16, 0x6d, 0xd0, 0xf3, 0xeb, 0x69, 0x51, 0x1f };
    std::vector<Uint8> ptext = {
        0xee, 0xd2, 0xfe, 0xe8, 0xf9, 0xbe, 0x1d, 0x5a, 0x55, 0xee, 0x4c, 0x28,
        0x61, 0xb9, 0x31, 0x42, 0x58, 0x2a, 0x67, 0xdd, 0xef, 0x39, 0x7b, 0xff,
        0xa6, 0xfa, 0x38, 0x1c, 0xa3, 0x4c, 0x93, 0xd5, 0xb4, 0xa1, 0xbd, 0x07,
        0xb5, 0xee, 0xbf, 0x30, 0xc0, 0x0f, 0xb0, 0xa3, 0xb5, 0x87, 0x9d, 0x85
    };
    std::vector<Uint8> ctext = {
        0xb6, 0xdd, 0x7e, 0xbb, 0xeb, 0x56, 0x83, 0x43, 0x17, 0xf2, 0xac, 0x1c,
        0xf0, 0xdc, 0x69, 0xb3, 0xb0, 0x2a, 0xb8, 0x7e, 0x7e, 0x52, 0x41, 0x11,
        0x36, 0x46, 0x34, 0x25, 0xf4, 0x00, 0x1c, 0xcd, 0xe3, 0x2a, 0x36, 0xf3,
        0x70, 0xcf, 0xe0, 0xfc, 0xe6, 0xa0, 0xac, 0x37, 0x6a, 0xe1, 0x3a, 0xe2
    };
    std::vector<Uint8> tag = { 0x77, 0xf6, 0xc4, 0x7b, 0x05, 0x40, 0xf0, 0xb9,
                               0xff, 0x3c, 0x3b, 0x07, 0xa2, 0x4c, 0x62, 0xfe };

    std::vector<Uint8> out(48);
    std::vector<Uint8> tag_out(16);

    auto alcpCipher = new CipherFactory<iCipherAead>;
    auto aead       = alcpCipher->create("aes-gcm-128");

    if (aead == nullptr) {
        delete alcpCipher;
        FAIL();
    }
    err = aead->init(getPtr(key), 128, getPtr(nonce), nonce.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->setAad(getPtr(aad), aad.size());
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->decrypt(&ctext[0], getPtr(out), 4);
    EXPECT_EQ(err, ALC_ERROR_NONE);

    err = aead->decrypt(&ctext[0] + 4, getPtr(out) + 4, ctext.size() - 4);
    EXPECT_EQ(err, ALC_ERROR_NONE);

    EXPECT_EQ(out, ptext);

    err = aead->getTag(getPtr(tag_out), 16);

    EXPECT_EQ(tag_out, tag);

    delete alcpCipher;
}
#endif