/*
 * Copyright (C) 2023-2024, Advanced Micro Devices. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS!
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <alcp/utils/cpuid.hh>
#include <gtest/gtest.h>
#include <iostream>

#include "alcp/mac/poly1305.hh"

using alcp::utils::CpuArchFeature;

std::string
parseBytesToHexStr(const Uint8* bytes, const int length)
{
    std::stringstream ss;
    for (int i = 0; i < length; i++) {
        int               charRep;
        std::stringstream il;
        charRep = bytes[i];
        // Convert int to hex
        il << std::hex << charRep;
        std::string ilStr = il.str();
        // 01 will be 0x1 so we need to make it 0x01
        if (ilStr.size() != 2) {
            ilStr = "0" + ilStr;
        }
        ss << ilStr;
    }
    return ss.str();
}

using alcp::mac::poly1305::Poly1305;

TEST(POLY1305, INIT_TEST)
{
    Poly1305<CpuArchFeature::eDynamic> poly;
}

TEST(POLY1305, BLK0)
{
    Uint8 blk[16]          = { 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72,
                               0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x46, 0x6f };
    Uint8 key[32]          = { 0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33,
                               0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8,
                               0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd,
                               0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b };
    std::vector<Uint8> out = { 0xfd, 0x86, 0x1c, 0x71, 0x84, 0xf9, 0x8f, 0x45,
                               0xdc, 0x6d, 0x5b, 0x4d, 0xc6, 0xc0, 0x81, 0xe4 };

    Poly1305<CpuArchFeature::eDynamic> poly;
    std::vector<Uint8>                 mac(16);
    poly.init(key, 32);
    poly.update(blk, 16);
    poly.finalize(&mac[0], 16);
    EXPECT_EQ(mac, out);
}

TEST(POLY1305, BLK_ALL)
{
    Uint8 blk[]   = { 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
                      0x70, 0x68, 0x69, 0x63, 0x20, 0x46, 0x6f, 0x72, 0x75,
                      0x6d, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
                      0x68, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70 };
    Uint8 key[32] = { 0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33,
                      0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8,
                      0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd,
                      0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b };

    std::vector<Uint8> out = { 0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6,
                               0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27, 0xa9 };

    Poly1305<CpuArchFeature::eDynamic> poly;
    std::vector<Uint8>                 mac(16);
    poly.init(key, 32);
    poly.update(blk, sizeof(blk));
    poly.finalize(&mac[0], 16);

    EXPECT_EQ(mac, out);
}

TEST(POLY1305, BLK_ALL_UPDATE_16)
{
    Uint8 blk[]   = { 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
                      0x70, 0x68, 0x69, 0x63, 0x20, 0x46, 0x6f, 0x72, 0x75,
                      0x6d, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
                      0x68, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70 };
    Uint8 key[32] = { 0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33,
                      0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8,
                      0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd,
                      0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b };

    std::vector<Uint8> out = { 0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6,
                               0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27, 0xa9 };

    Poly1305<CpuArchFeature::eDynamic> poly;
    poly.init(key, 32);
    std::vector<Uint8> mac(16);
    poly.update(blk, 16);
    poly.update(blk + 16, 16);
    poly.update(blk + 32, sizeof(blk) - 32);
    poly.finalize(&mac[0], 16);

    EXPECT_EQ(mac, out);
}

TEST(POLY1305, BLK_ALL_UPDATE)
{
    Uint8 blk[]   = { 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
                      0x70, 0x68, 0x69, 0x63, 0x20, 0x46, 0x6f, 0x72, 0x75,
                      0x6d, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
                      0x68, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70 };
    Uint8 key[32] = { 0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33,
                      0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8,
                      0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd,
                      0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b };

    std::vector<Uint8> out = { 0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6,
                               0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27, 0xa9 };

    Poly1305<CpuArchFeature::eDynamic> poly;
    poly.init(key, 32);
    std::vector<Uint8> mac(16);
    poly.update(blk, sizeof(blk));
    poly.finalize(&mac[0], 16);
    // poly.mac(blk, key, sizeof(blk), &mac.at(0));

    EXPECT_EQ(mac, out);
}

TEST(POLY1305, BLK_ALL_UPDATE_RESET)
{
    Uint8 blk[]   = { 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
                      0x70, 0x68, 0x69, 0x63, 0x20, 0x46, 0x6f, 0x72, 0x75,
                      0x6d, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
                      0x68, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70 };
    Uint8 key[32] = { 0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33,
                      0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8,
                      0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd,
                      0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b };

    std::vector<Uint8> out = { 0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6,
                               0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27, 0xa9 };

    Poly1305<CpuArchFeature::eDynamic> poly;
    poly.init(key, 32);
    std::vector<Uint8> mac(16);
    poly.update(blk, 16);
    poly.reset();
    poly.update(blk, sizeof(blk));
    poly.finalize(&mac[0], 16);
    // poly.mac(blk, key, sizeof(blk), &mac.at(0));

    EXPECT_EQ(mac, out);
}

TEST(POLY1305, BLK_ALL_FINALIZE_RESET_FINALIZE)
{
    Uint8 blk[]   = { 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
                      0x70, 0x68, 0x69, 0x63, 0x20, 0x46, 0x6f, 0x72, 0x75,
                      0x6d, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
                      0x68, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70 };
    Uint8 key[32] = { 0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33,
                      0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8,
                      0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd,
                      0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b };

    std::vector<Uint8> out = { 0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6,
                               0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27, 0xa9 };

    Poly1305<CpuArchFeature::eDynamic> poly;
    poly.init(key, 32);
    std::vector<Uint8> mac(16);
    poly.update(blk, sizeof(blk));
    poly.reset();
    poly.update(blk, sizeof(blk));
    poly.finalize(&mac[0], 16);
    // poly.mac(blk, key, sizeof(blk), &mac.at(0));

    EXPECT_EQ(mac, out);
}

TEST(POLY1305, BLK_ALL_FINALIZE_UPDATE)
{
    Uint8 blk[]   = { 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
                      0x70, 0x68, 0x69, 0x63, 0x20, 0x46, 0x6f, 0x72, 0x75,
                      0x6d, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
                      0x68, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70 };
    Uint8 key[32] = { 0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33,
                      0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8,
                      0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd,
                      0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b };

    std::vector<Uint8> out = { 0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6,
                               0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27, 0xa9 };

    Poly1305<CpuArchFeature::eDynamic> poly;
    poly.init(key, 32);
    std::vector<Uint8> mac(16);
    poly.update(blk, sizeof(blk));
    poly.finalize(&mac[0], 16);
    alc_error_t err = poly.update(blk, 16);

    ASSERT_FALSE(err == ALC_ERROR_NONE);
}

TEST(POLY1305, BLK_ALL_FINALIZE_FINALIZE)
{
    Uint8 blk[]   = { 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
                      0x70, 0x68, 0x69, 0x63, 0x20, 0x46, 0x6f, 0x72, 0x75,
                      0x6d, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
                      0x68, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70 };
    Uint8 key[32] = { 0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33,
                      0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8,
                      0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd,
                      0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b };

    std::vector<Uint8> out = { 0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6,
                               0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27, 0xa9 };

    Poly1305<CpuArchFeature::eDynamic> poly;
    poly.init(key, 32);
    std::vector<Uint8> mac(16);
    poly.finalize(blk, sizeof(blk));
    alc_error_t err = poly.finalize(blk, sizeof(blk));
    // poly.mac(blk, key, sizeof(blk), &mac.at(0));

    ASSERT_FALSE(err == ALC_ERROR_NONE);
}

TEST(POLY1305, BLK_X8_TO_X1)
{
    Uint8 blk[] = {
        0xaa, 0x88, 0x09, 0xa2, 0x8f, 0xa5, 0x1e, 0xa5, 0x32, 0x47, 0x97, 0x01,
        0xe7, 0x6b, 0x3b, 0x5f, 0x94, 0x37, 0x07, 0x26, 0xae, 0x11, 0xb4, 0x00,
        0xbf, 0x87, 0xf7, 0x24, 0xb7, 0xd2, 0x6e, 0x45, 0x12, 0x47, 0xc0, 0x2b,
        0xd9, 0xd6, 0x0c, 0xec, 0xc4, 0xb2, 0x9c, 0x16, 0xf2, 0x1e, 0x1f, 0x39,
        0x6c, 0x05, 0x7c, 0xcc, 0x1c, 0xf5, 0x47, 0x52, 0x6f, 0xdc, 0x42, 0xed,
        0x01, 0x38, 0x32, 0x64, 0xc3, 0x36, 0xd4, 0x97, 0xbe, 0x05, 0x15, 0x02,
        0x26, 0x1f, 0x40, 0xcd, 0xc9, 0x5e, 0x76, 0xb3, 0x40, 0xa8, 0xdf, 0xec,
        0x94, 0xd2, 0x04, 0x23, 0x96, 0x66, 0x83, 0x10, 0x6b, 0xe0, 0xd4, 0x8a,
        0xa2, 0x42, 0xdc, 0xf4, 0x32, 0x22, 0x5a, 0xfe, 0x45, 0x09, 0xec, 0x69,
        0x29, 0xd7, 0xa5, 0x54, 0x01, 0xba, 0xe1, 0xd6, 0x26, 0x0a, 0xbe, 0x40,
        0x65, 0xa6, 0x80, 0xc1, 0x5c, 0x4d, 0x6d, 0x50, 0xe0, 0xac, 0x3f, 0xab,
        0x04, 0xb4, 0x2c, 0x96, 0xfe, 0xe9, 0x86, 0x6e, 0x84, 0x97, 0xba, 0x41,
        0x17, 0xfb, 0xbc, 0x62, 0x49, 0xae, 0x20, 0xa3, 0x9a, 0xa4, 0x3c, 0x84,
        0xfe, 0x88, 0xe1, 0xff, 0x36, 0x87, 0xc0, 0x77, 0x0a, 0x22, 0x3f, 0x3d,
        0x67, 0xfe, 0xed, 0xdc, 0x4d, 0x95, 0xff, 0x42, 0xfb, 0x54, 0x31, 0xaf,
        0xc2, 0xc7, 0x02, 0x9f, 0x28, 0x0f, 0x47, 0x7e, 0x40, 0xb9, 0x8e, 0xc6,
        0xe2, 0x98, 0xda, 0xbe, 0x08, 0x53, 0x42, 0x47, 0x44, 0x15, 0x25, 0x7d,
        0x0b, 0x81, 0x82, 0x9b, 0x09, 0x39, 0x6f, 0xe1, 0xcf, 0xd2, 0xe5, 0xee,
        0xcb, 0x59, 0x32, 0x56, 0x2e, 0x3e, 0xf9, 0xc7, 0x6b, 0xa7, 0x05, 0x16,
        0x1b, 0x40, 0x6f, 0xd7, 0x90, 0x7d, 0x5c, 0xf5, 0xbe, 0xed, 0xd3, 0x64,
        0x33, 0xa3, 0xe1, 0x95, 0x78, 0x92, 0xa9, 0xc4, 0x89, 0x97, 0xbf, 0x79,
        0x6c, 0xdc, 0xdc, 0xad, 0x85, 0xd7, 0xa5, 0xae, 0x0c, 0x5a, 0x16, 0x76,
        0xfe, 0x67, 0xa8, 0x51, 0x2e, 0x39, 0x49, 0xd1, 0xc2, 0x39, 0x0c, 0x68,
        0x17, 0x9d, 0x8c, 0xf6, 0xbc, 0xd8, 0xfd, 0x4e, 0x70, 0xa7, 0xc3, 0x56,
        0x88, 0x63, 0x0d, 0xc2, 0xa8, 0x83, 0xf9, 0x97, 0x78, 0x37, 0x7e, 0x17,
        0x9e, 0x0c, 0x50, 0x9f, 0x3a, 0xc6, 0x99, 0x1c, 0x42, 0x7a, 0x1f, 0x4c,
        0xdd, 0x8e, 0x4a, 0xcb, 0x1f, 0xd6, 0x5a, 0x44, 0x5e, 0x44, 0x4b, 0x9d,
        0x0c, 0x62, 0xe3, 0x0f, 0x62, 0x1c, 0x14, 0x07, 0x99, 0x9a, 0x46, 0xe9,
        0x22, 0x8e, 0x27, 0x58, 0x2e, 0x91, 0xa1, 0xea, 0xf6, 0xf8, 0x0b, 0x26,
        0x57, 0x03, 0x37, 0x88, 0xfa, 0x0f, 0x3c, 0x2a, 0x88, 0xcb, 0xf7, 0xf7,
        0xc8, 0x81, 0x38, 0x5e, 0xbc, 0xf2, 0x54, 0x1d, 0xa8, 0x0a, 0xc2, 0x0f,
        0xfb, 0xb7, 0x77, 0x5f, 0x81, 0x4e, 0xb4, 0x52, 0x87, 0xf0, 0xf7, 0x71,
        0x2a, 0x37, 0x30, 0x2b, 0x3f, 0xaa, 0x96, 0xee, 0x30, 0x92, 0xa7, 0x02,
        0x7f, 0xc6, 0xa1, 0x06, 0xfa, 0xe9, 0xf9, 0x48, 0x9a, 0x80, 0xf8, 0x66,
        0x0e, 0xf0, 0xfe, 0x2e, 0x0c, 0x71, 0x23, 0x13, 0xd8, 0xbe, 0xbe, 0x4c,
        0x3c, 0x42, 0x3b, 0x3b, 0x97, 0x75, 0xd5, 0x95, 0x6a, 0xc0, 0x7c, 0x9d,
        0x39, 0x0a, 0x19, 0x4d, 0x31, 0xd9, 0xe7, 0x4f, 0x19, 0xfd, 0x2f, 0xb8,
        0x61, 0xd3, 0x39, 0x6c, 0xf1, 0x28, 0xd6, 0x27, 0x15, 0xf5, 0x79, 0xbb,
        0xda, 0xff, 0xdf, 0x59, 0xde, 0x2c, 0xca, 0x3a, 0xc5, 0x35, 0x68, 0x62,
        0x7b, 0xc6, 0x7b, 0xaa, 0x71, 0x6f, 0x28, 0xc2, 0xcf, 0xae, 0x18, 0x7a,
        0xf4, 0xc3, 0x41, 0xbc, 0x7e, 0x2e, 0x16, 0xec, 0xc5, 0xa8, 0xb9, 0x6c,
        0xa4, 0xde, 0x4d, 0x6a, 0xb7, 0x53, 0x61, 0x43, 0x3c, 0xcc, 0x38, 0x70,
        0x4d, 0xfe, 0x9d, 0xbb, 0x6c, 0xac, 0x2b, 0x18, 0x2d, 0xed, 0xd2, 0xc4,
        0x95, 0x95, 0xbc, 0xb2, 0x59, 0x1b, 0xdf, 0x26, 0x53, 0x6c, 0x79, 0x59
    };

    Uint8 key[32] = { 0x37, 0x5f, 0xd1, 0x00, 0xf1, 0xe1, 0xda, 0xf3,
                      0x2d, 0x32, 0x93, 0x1b, 0x5a, 0xc8, 0xfc, 0x46,
                      0x4f, 0x0d, 0x39, 0x46, 0x20, 0x44, 0x41, 0x15,
                      0xd1, 0x7e, 0x07, 0x25, 0x31, 0x86, 0xe6, 0x36 };

    std::vector<Uint8> out = { 0x53, 0xc0, 0x52, 0x71, 0x74, 0x30, 0x71, 0x71,
                               0xf0, 0x67, 0xf2, 0xed, 0xae, 0x41, 0xf0, 0x7f };

    Poly1305<CpuArchFeature::eDynamic> poly;

    poly.init(key, 32);

    std::vector<Uint8> mac(16);

    poly.update(blk, 512);

    poly.update(blk + 512, 16);

    poly.finalize(mac.data(), mac.size());

    EXPECT_EQ(out, mac);
}

TEST(POLY1305, BLK_X1_TO_X8)
{
    Uint8 blk[] = {
        0xaa, 0x88, 0x09, 0xa2, 0x8f, 0xa5, 0x1e, 0xa5, 0x32, 0x47, 0x97, 0x01,
        0xe7, 0x6b, 0x3b, 0x5f, 0x94, 0x37, 0x07, 0x26, 0xae, 0x11, 0xb4, 0x00,
        0xbf, 0x87, 0xf7, 0x24, 0xb7, 0xd2, 0x6e, 0x45, 0x12, 0x47, 0xc0, 0x2b,
        0xd9, 0xd6, 0x0c, 0xec, 0xc4, 0xb2, 0x9c, 0x16, 0xf2, 0x1e, 0x1f, 0x39,
        0x6c, 0x05, 0x7c, 0xcc, 0x1c, 0xf5, 0x47, 0x52, 0x6f, 0xdc, 0x42, 0xed,
        0x01, 0x38, 0x32, 0x64, 0xc3, 0x36, 0xd4, 0x97, 0xbe, 0x05, 0x15, 0x02,
        0x26, 0x1f, 0x40, 0xcd, 0xc9, 0x5e, 0x76, 0xb3, 0x40, 0xa8, 0xdf, 0xec,
        0x94, 0xd2, 0x04, 0x23, 0x96, 0x66, 0x83, 0x10, 0x6b, 0xe0, 0xd4, 0x8a,
        0xa2, 0x42, 0xdc, 0xf4, 0x32, 0x22, 0x5a, 0xfe, 0x45, 0x09, 0xec, 0x69,
        0x29, 0xd7, 0xa5, 0x54, 0x01, 0xba, 0xe1, 0xd6, 0x26, 0x0a, 0xbe, 0x40,
        0x65, 0xa6, 0x80, 0xc1, 0x5c, 0x4d, 0x6d, 0x50, 0xe0, 0xac, 0x3f, 0xab,
        0x04, 0xb4, 0x2c, 0x96, 0xfe, 0xe9, 0x86, 0x6e, 0x84, 0x97, 0xba, 0x41,
        0x17, 0xfb, 0xbc, 0x62, 0x49, 0xae, 0x20, 0xa3, 0x9a, 0xa4, 0x3c, 0x84,
        0xfe, 0x88, 0xe1, 0xff, 0x36, 0x87, 0xc0, 0x77, 0x0a, 0x22, 0x3f, 0x3d,
        0x67, 0xfe, 0xed, 0xdc, 0x4d, 0x95, 0xff, 0x42, 0xfb, 0x54, 0x31, 0xaf,
        0xc2, 0xc7, 0x02, 0x9f, 0x28, 0x0f, 0x47, 0x7e, 0x40, 0xb9, 0x8e, 0xc6,
        0xe2, 0x98, 0xda, 0xbe, 0x08, 0x53, 0x42, 0x47, 0x44, 0x15, 0x25, 0x7d,
        0x0b, 0x81, 0x82, 0x9b, 0x09, 0x39, 0x6f, 0xe1, 0xcf, 0xd2, 0xe5, 0xee,
        0xcb, 0x59, 0x32, 0x56, 0x2e, 0x3e, 0xf9, 0xc7, 0x6b, 0xa7, 0x05, 0x16,
        0x1b, 0x40, 0x6f, 0xd7, 0x90, 0x7d, 0x5c, 0xf5, 0xbe, 0xed, 0xd3, 0x64,
        0x33, 0xa3, 0xe1, 0x95, 0x78, 0x92, 0xa9, 0xc4, 0x89, 0x97, 0xbf, 0x79,
        0x6c, 0xdc, 0xdc, 0xad, 0x85, 0xd7, 0xa5, 0xae, 0x0c, 0x5a, 0x16, 0x76,
        0xfe, 0x67, 0xa8, 0x51, 0x2e, 0x39, 0x49, 0xd1, 0xc2, 0x39, 0x0c, 0x68,
        0x17, 0x9d, 0x8c, 0xf6, 0xbc, 0xd8, 0xfd, 0x4e, 0x70, 0xa7, 0xc3, 0x56,
        0x88, 0x63, 0x0d, 0xc2, 0xa8, 0x83, 0xf9, 0x97, 0x78, 0x37, 0x7e, 0x17,
        0x9e, 0x0c, 0x50, 0x9f, 0x3a, 0xc6, 0x99, 0x1c, 0x42, 0x7a, 0x1f, 0x4c,
        0xdd, 0x8e, 0x4a, 0xcb, 0x1f, 0xd6, 0x5a, 0x44, 0x5e, 0x44, 0x4b, 0x9d,
        0x0c, 0x62, 0xe3, 0x0f, 0x62, 0x1c, 0x14, 0x07, 0x99, 0x9a, 0x46, 0xe9,
        0x22, 0x8e, 0x27, 0x58, 0x2e, 0x91, 0xa1, 0xea, 0xf6, 0xf8, 0x0b, 0x26,
        0x57, 0x03, 0x37, 0x88, 0xfa, 0x0f, 0x3c, 0x2a, 0x88, 0xcb, 0xf7, 0xf7,
        0xc8, 0x81, 0x38, 0x5e, 0xbc, 0xf2, 0x54, 0x1d, 0xa8, 0x0a, 0xc2, 0x0f,
        0xfb, 0xb7, 0x77, 0x5f, 0x81, 0x4e, 0xb4, 0x52, 0x87, 0xf0, 0xf7, 0x71,
        0x2a, 0x37, 0x30, 0x2b, 0x3f, 0xaa, 0x96, 0xee, 0x30, 0x92, 0xa7, 0x02,
        0x7f, 0xc6, 0xa1, 0x06, 0xfa, 0xe9, 0xf9, 0x48, 0x9a, 0x80, 0xf8, 0x66,
        0x0e, 0xf0, 0xfe, 0x2e, 0x0c, 0x71, 0x23, 0x13, 0xd8, 0xbe, 0xbe, 0x4c,
        0x3c, 0x42, 0x3b, 0x3b, 0x97, 0x75, 0xd5, 0x95, 0x6a, 0xc0, 0x7c, 0x9d,
        0x39, 0x0a, 0x19, 0x4d, 0x31, 0xd9, 0xe7, 0x4f, 0x19, 0xfd, 0x2f, 0xb8,
        0x61, 0xd3, 0x39, 0x6c, 0xf1, 0x28, 0xd6, 0x27, 0x15, 0xf5, 0x79, 0xbb,
        0xda, 0xff, 0xdf, 0x59, 0xde, 0x2c, 0xca, 0x3a, 0xc5, 0x35, 0x68, 0x62,
        0x7b, 0xc6, 0x7b, 0xaa, 0x71, 0x6f, 0x28, 0xc2, 0xcf, 0xae, 0x18, 0x7a,
        0xf4, 0xc3, 0x41, 0xbc, 0x7e, 0x2e, 0x16, 0xec, 0xc5, 0xa8, 0xb9, 0x6c,
        0xa4, 0xde, 0x4d, 0x6a, 0xb7, 0x53, 0x61, 0x43, 0x3c, 0xcc, 0x38, 0x70,
        0x4d, 0xfe, 0x9d, 0xbb, 0x6c, 0xac, 0x2b, 0x18, 0x2d, 0xed, 0xd2, 0xc4,
        0x95, 0x95, 0xbc, 0xb2, 0x59, 0x1b, 0xdf, 0x26, 0x53, 0x6c, 0x79, 0x59
    };

    Uint8 key[32] = { 0x37, 0x5f, 0xd1, 0x00, 0xf1, 0xe1, 0xda, 0xf3,
                      0x2d, 0x32, 0x93, 0x1b, 0x5a, 0xc8, 0xfc, 0x46,
                      0x4f, 0x0d, 0x39, 0x46, 0x20, 0x44, 0x41, 0x15,
                      0xd1, 0x7e, 0x07, 0x25, 0x31, 0x86, 0xe6, 0x36 };

    std::vector<Uint8> out = { 0x53, 0xc0, 0x52, 0x71, 0x74, 0x30, 0x71, 0x71,
                               0xf0, 0x67, 0xf2, 0xed, 0xae, 0x41, 0xf0, 0x7f };

    Poly1305<CpuArchFeature::eDynamic> poly;

    poly.init(key, 32);

    std::vector<Uint8> mac(16);

    poly.update(blk, 16);

    poly.update(blk + 16, 512);

    poly.finalize(mac.data(), mac.size());

    EXPECT_EQ(out, mac);
}